     Flair for FLUKA


                 *****   ****
                **  **     **               **
                **         **               **
               **         **
             *******      **     **** **  ***   ***  **
               **        **     **  ***    **    ** ****
              **         **    **    **    **    **** *
              **         **    **    **   **    ***
              **        **    **    **    **    **
             **         **    **    **    **    **
             **        **     **   ***   **    **
             **        ** *   **  **** * ** *  **
             **        ****    **** ***  ****  **
            **
         ** **                                for FLUKA
         ****                                (c) 2006-2019


  /flair/ n [U,C] natural or instinctive ability to do something well
            to select or recognize what is best, more useful, etc.
                                        Oxford Advanced Dictionary



           www:      http://www.fluka.org/flair
           authors:  Vasilis Vlachoudis

           contributing authors:
                     David Sinuela
                     Pablo Garcia Ortega
                     Wioletta Kozlowska

           past contributors:
                     Adonai Herrera-Martinez
                     Lucia Sarchiapone
                     Marco Mauri
                     Roberto Versaci
                     Sylvestre Catin
                     Vittorio Boccone
                     Thanasis Manousos


1******************************************************************************

                       Index of FLAIR online manual

 F1} Prologue
 F2} Interface
 F3} Input Editor
 F4} Geometry
 F5} Plots
 F6} Configuration Dialog
 F7} API
 F8} Copyright and License

1******************************************************************************

  F1} Prologue

              {img:flair.gif}

  ABOUT
  ~~~~~
  flair is an advanced user friendly interface for FLUKA to facilitate
  the editing of FLUKA input files, execution of the code and
  visualization of the output files. It is based entirely on python
  and Tkinter. Flair provides the following functionality:

      1. front-end interface for an easy and almost error free
         editing as well as validation of the input file during
         editing;

      2. interactive geometry editor, allowing to edit bodies and
         regions in a visual/graphical way with immediate debugging
         information

      3. debugging, compiling, running and monitoring of the
         status during a run;

      4. back-end interface for post-processing of the output
         files and plot generation through an interface with gnuplot
         or 3D photo-realistic;

      5. library of materials and geometrical objects, for easier
         editing, storing and sharing among other users and projects;

      6. python API for manipulating the input files, post
         processing of the results and interfacing to gnuplot;

      7. import/export to various formats (mcnp, povray, dxf,
         bitmap-images)

  The philosophy of flair interface was to work on an intermediate
  level. Not too high, that hides the inner functionality of FLUKA
  from the user, and not so low that the user is in constant need of
  the FLUKA manual to verify the options for each card. Flair works
  directly with the input file of FLUKA and is able to read/write all
  acceptable FLUKA input formats. In the input editor the user is
  working directly with the FLUKA cards using a small dialog for each
  card. The program displays the card information in an interpreted
  human readable way. The only exception is that the cards in flair
  are so called extended cards where each card is not composed only by
  6 WHATs and 1 SDUM but rather they contains all related information
  in one unit (comments preceding the card, continuation cards, titles
  etc).


  F1.1} Installation

  For installation instructions please look on the README file

  F1.2} Command line options

  Syntax: flair [options] <file.flair>

  Options:
        -1              Load the first flair file in the folder
        -d              Activate the beta-development features
        -D              Deactivate beta-development features (default)
        -i file         Alternative flair ini file
                        (Default to $HOME/.flair/flair.ini))
        --ini file
        -e executable   Fluka executable. (Default to flukahp)
        --exe executable
        -r              Load most recent project
        --recent
        -R #            Load recent project (number 1..10 or filename)
        -l              List recent projects
        --list
        -s              Skip About dialog
        file            flair project file or input file or imported files
                        extensions supported:
                              .flair (or none)
                              .inp, .fluka
                              .pickle
                              .mcnp
                              .gdml

  Environment variables:
      PYTHON    Set this variable only in the case that a different
                python installation is needed. The variable should
                point the python executable

  F1.3} References

  -  V.Vlachoudis "FLAIR: A Powerful But User Friendly Graphical Interface
     For FLUKA" Proc. Int. Conf. on Mathematics, Computational Methods & Reactor
     Physics (M&C 2009), Saratoga Springs, New York, 2009
     URL: http://www.fluka.org/flair/Flair_MC2009.pdf


1******************************************************************************

  F2} Interface

  Flair window contains the following:
     1. tab bar containing the program tabs, the dynamic or
        hidden tabs and quick access to the important actions
        save, undo/redo, help
     2. a dynamic ribbon with all actions for the selected page
     3. one or many program pages (user configurable)
     4. an auto hide notification area
     5. a status bar
     6. quick access buttons to the output page and preferences

{img:grab-interface.gif}

  F2.1} Tabs

  In flair each tab corresponds to a specific page and a separate
  action of the program. The user can configure by drag-n-drop the
  order of the tabs as well which ones should appear permanently or
  are accessible under the dynamic tab.
  For detail information on each tab and the associate ribbon actions
  please go to the appropriate section in the manual

     :Flair:         project related I/O functions
                     (save, load, start from template, etc...)
                     display the project title and project notes.

     :Input:         editing of the FLUKA input file F3

     :Geometry:      interactive 2D and 3D geometry editor F4

     :Run:           running, inspecting the output files and data
                     processing

     :Plot:          plot creation F5

     :Calculator:    scientific calculator with FLUKA constants
                     and physics functions

     :Compile:       compilation of FLUKA executable

     :Dicom:         DICOM importing to Voxel or USRBIN

     :Elements:      periodic table of elements

     :Materials:     material database

     :Output:        output viewer

     :Pet:           automatic PET geometry creation

     :Viewer:        file viewer


1******************************************************************************
  {:Flair:}

  The flair page allows the user:
    - to load/save the flair project
    - create new inputs based on the predefined templates
    - configure flair
    - check for updates
    - edit the project notes information

{img:grab-flair-page.gif}

  Ribbon
  ~~~~~~
    Project      shortcut  description
    -----------  --------  ------------------------------------------
       New                  Create a new flair project

       Open                 - Open an existing flair project
                            - Open a recent flair projects

       Save       Ctrl-S    - Save current project
                            - Save with a different filename


    Publish      shortcut  description
    -----------  --------  ------------------------------------------
       Document            Write a documentation out of the notes

       Print      Ctrl-P   Print notes

       Refresh    Ctrl-R   Refresh notes (reload all images)


    Tools        shortcut  description
    -----------  --------  ------------------------------------------
       Config              Open the flair preferences dialog

       Report              Report a bug or suggestion to flair author

       Updates             Check for flair/fluka updates (normally every 30days)

       About               Display the about dialog


    Close        shortcut  description
    -----------  --------  ------------------------------------------
       Exit       Ctrl-Q   Close the program (all flair windows)



  Fields
  ~~~~~~

      Title        Title of the project.
                   - When an input file is loaded the title will
                     be updated with the title of the input
                     file.
                   - When the title string is updated the
                     program will ask to modify the TITLE and
                     GEOBEGIN title cards

      Notes        User area to keep notes related to the FLUKA project.
                   Special tags:
                     { img:filename } Import image inside the notes
                                      Image notes can be any plot-image
                                      by clicking the "Notes" button in
                                      the Plot page


      Input Templates
      ~~~~~~~~~~~~~~~

      flair contains a few input templates located in the subdirectory
      /templates under the flair directory. The default flair templates are
      prefixed with a "D:" in the template list dialog.
      The user can create its own templates in the $HOME/.flair/templates
      directory. Templates are plain FLUKA input files.



1******************************************************************************
  {:Run:}

  The Run page is a combined page of the following views

      :Run:Run:   allows the user to run and monitor his simulations

      :Run:Files: to inspect the files during a run

      :Run:Data:  to process the output files

   All the three views share the same listbox on the left containing
   the list of simulations associated with this project/input file.

{img:grab-run-page.gif}

  Ribbon
  ~~~~~~
    View         shortcut  description
    -----------  --------  ------------------------------------------
       Run                 Show the :Run:Run: window

       Files               Show the :Run:Files: window

       Data                Show the :Run:Data: window


    Input        shortcut  description
    -----------  --------  ------------------------------------------
       Add        Ins      Add a new simulation/input

       Delete     Del      Delete the selected runs or spawned jobs

       Clone      Ctrl-D   Clone/Duplicate the selected runs

       Loop                Loop on the selected runs.
                           Allows the user to create clones of runs by
                           looping on a user defined variable (#define)
                           over a range of values.
                           E.g. Imagine you want to run 9 simulations with
                                varying energy from 10 to 100MeV
                                Steps:
                                  - define a variable in the input e.g.
                                    #define E 0.01
                                  - use the variable to the beam card
                                    BEAM    E: =-E
                                    (The minus is necessary for fluka to
                                     treat the function as energy. See below
                                     on Function Evaluation F3.6}
                                   - Click on the loop button, select the
                                     variable E and enter as:
                                        Start value: 0.01
                                        End value:   0.10
                                        Step:        0.01
                                     Click OK and 9 runs will be automatically
                                     generated.

                           You can loop on looped runs to create 2D scans. etc.

        Move Up    Ctrl-Up Move upwards the selected runs

        Move Down  Ctrl-Dn Move downwards the selected runs

        Rename   F2,Ctrl-E Rename the selected run



    Listbox          description
    -----------     ------------------------------------------
     Column-1        empty for a standalone run
                     +     for a group (click on + to expand it)
                     -     for a group (click on - to collapse it)
                     .     for a spawned job

     Column-2        filename to be given to the job
                     editable field: type-in the name of the run
                     The default run is the first one in the list,
                     with the input name inside the brackets <...>
                     Spawned jobs automatically are assigned names
                     based on the rules set on the Configuration F6 dialog (Runs)

     Column-3        number of spawned jobs (for multi-core CPUs)
                     editable field: type-in any number to set/remove
                                     spawned jobs
                                     Enter 0 (zero) to remove all spawned jobs


1******************************************************************************
  {:Run:Run:}


  The Run view allows the user to run and monitor his simulation file as
  it is represented in the input editor, and/or to create multiple runs
  using the input file as the basic input by overriding some parameters.

{img:grab-run-page.gif}

  Ribbon
  ~~~~~~
     Job         shortcut  description
    -----------  --------  ------------------------------------------
       Queue               The drop down box allows you to select the submit
                           queue. You can define your own queues in the
                           Configuration dialog F6}

       Continue            Find the last random number seed file available for
                           the highlighted run and set it to the "Previous"
                           spin box

       Attach              flair will try to find in which directory the run
                           takes place in order to monitor the progress of
                           the run. Attach is done automatically when
                           submitting a job.

       Prev                Select the previous(last) cycle in case you want
                           to continue a run

       No                  Number of cycles to be performed

       To                  Last cycle to run (To = Prev + No) automatically
                           updated

       Refresh     Ctrl-R  Progress information is displayed at constant time
                           intervals (~30 sec) defined the preferences dialog f4}.
                           The refresh button will force the update of the
                           progress information when pressed.

       Clean               Delete all FLUKA generated files for the selected
                           run. Its a good habit to clean before starting a
                           new run.

       Stop Cycle          Creates a "fluka.stop" file in the temporary
                           directory created by fluka to make a clean stop
                           the present cycle

       Stop Run            Creates a "rfluka.stop" file in the temporary
                           directory created by fluka to make a clean stop
                           the present run

       Kill                Issues a kill -SIGHUP command to the running
                           process. If the user is using a batch system he
                           has to substitute the kill command with the
                           appropriate program
                           WARNING: By kill the fluka run no file will be
                           saved and all results collected up to this point
                           will be lost

       Run      Ctrl-Enter Submits a run using the submit command defined in
                           preferences dialog f4}.


   Fields
   ~~~~~~
       Title         Title of the run

       Primaries     Override the number of primaries to execute

       Rnd           Random number seed.

       Time          Time limit of run  START WHAT(6)

       Exe           FLUKA executable file

       Default       Reset to the default "Defines" cards

       Defines       Preprocessor defines (enable/disable) and
                     change the value.

                     Leaving empty the value it will inherit
                     the one from the master input

                     To multiple-edit many runs:
                     - select the desired runs
                     - all fields will be disabled
                     - Right-click on the field to enable and change it

       Progress      Shows the progress of the run by peaking
                     information from the fluka output file during
                     runtime.



   Attaching process and progress monitoring
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   The dialog below the control buttons while change and it will be
   refreshed every half a minute (defined in the configuration dialog F6).
   During the execution the "Status" will change, initially to Waiting to
   attach, followed by Running and finally in Finished OK. The program is
   running decoupled from the flair editor, therefore if you click save on
   the project and exit the program. The next time you will open the
   program, flair will try to attach and display the current run status.

   WARNING if you don't save the project after the run the program will not
   know that there is a simulation being executed, and it will not try to
   attached to it. To force to attach click on the "Attach" button.

   Flair is trying to peek the run information only by looking the status
   of the output files. It doesn't make use of the system process
   information. This way it increases portability across different
   platforms, and batch systems (see the qfluka example for a substitution
   of the submit command). The default behaviour of FLUKA is to report the
   status of the run a few times during the whole run. There in very long
   runs flair could have difficulties in peeking the correct information.
   You could force more verbose output in FLUKA with the START card.

   Flair will be able to monitor the status only if the run takes place on
   the same directory. The drawback of this method is that takes some time
   to attach, and if many runs takes place at the same directory with the
   same name (highly not recommended) flair will prompt the user to select
   the current run to attach.


1******************************************************************************
  {:Run:Files:}

  The Files view is a file browser for inspecting the files generated
  by FLUKA Run or after the Data processing. The user can limit the
  view by selecting only the appropriate run / cycles he wants to
  display. In the file list the user can inspect the data files and/or
  delete them.

{img:grab-files-page.gif}

  The frame is composed by 3 listboxes and a couple of action buttons on
  the side. The first listbox with the label "Run", contains a list of the
  different runs present in this project (Defined in the Run page).

  The second listbox with the label "Cycles", contains a list of the
  available cycles for the selected runs. It will display also the
  temporary fluka_XXXX directories that are related with the input file,
  and the special "directories":
     compile          containing all the output files produced when
                      building the fluka executable
     data             containing all the output files that are produced
                      after Data merging.
     plot             all plotting files generated by flair


  Ribbon
  ~~~~~~
    Files        shortcut  description
    -----------  --------  ------------------------------------------
       Ascii               Convert the binary files to ASCII (USRBINs)

       Delete     Del      Delete selected files. If all files in a fluka_XXX
                           directory are deleted the directory will be removed also

       Refresh    Ctrl-R   Refresh the file list

       Filter              Narrow the file list display only to files with a
                           specific pattern:
                             Wild characters accepted:
                                 *               Match as many characters
                                 ?               Match only one character
                             e.g *.out           Show only output files

    Action       shortcut  description
    -----------  --------  ------------------------------------------
       Viewer     Enter    Open File viewer for selected files. If a core dump
                  Double   is selected the gdb will be opened inside a terminal

       Editor              Open selected Files in the editor


   Notes
   ~~~~~
   - Do not try to open binary files. Usually they are unreadable and they
     require a lot of space.
   - Opening core dumps will open the predefined debugger.



1******************************************************************************
  {:Run:Data:}

  The Data Merging view permits the user to merge the output files
  generated by FLUKA into the files that will be subsequently used for
  plotting or inspection of the results. Flair makes this process
  transparent to the user with the Process Data page.

{img:grab-data-page.gif}

  One would expect that the simulation is equivalent to a counting
  experiment, therefore the data will follow a Poisson distribution and the
  error will be the square root of the number of events collected. This is
  true provided that no biasing is used in the simulation. When importance
  scoring is involved (quite typical and recommended way of working) to
  calculate correctly the statistical error, apart from the final value one
  has to record also the square of events/hits for every value needed. This
  doubles the memory and increases the complexity for special estimators.
  Therefore, FLUKA is making use of the Central Limit Theorem for
  calculating the mean value of a quantity scored and the error on the
  determination of the mean. The  theorem states:

    "The distribution of an average tends to be Normal, even when the
     distribution from which the average is computed is decidedly
     non-Normal."

  This is the main reason we have to perform several cycles, minimum 5 is
  recommended to simulate correctly a Normal distribution, and then sum-up
  and average the results. In FLUKA this is done automatically with the
  us?suw utilities, Where ? can be:
        b=USRBIN
        r=RESNUCLEi
        t=USRTRACK or USRCOLL
        x=USRBDX
        y=USRYIELD
  These programs expect as input a list of binary files generated from
  FLUKA with the respective card and using as unit a negative number, and
  in the end they generate a set of output files both binary, text and
  tabulated with the results.

  On the right side the window contains two list boxes
  Top:    the list of detectors (scoring units Usrxxx) requested for each run.
          Automatically a default name will be assigned in the form of
          "input-name"_"card"_"unit". The user with the buttons on the right
          can delete the file, create a new one or rename it.
          The default rule for generating the files can be configured
          in the Preferences F6 dialog under the Data section

  Bottom: the list of files associated with each detector


  Ribbon
  ~~~~~~
    Detector     shortcut  description
    -----------  --------  ------------------------------------------
       Scan                Scan input for possible detector cards.
                           Warning: Only the BINARY ones will appear
                                    ASCII files cannot be merged

       Add        Ins      Add a detector file for processing

       Remove     Del      Remove a detector file from processing

       Rename     F2       Change the name of a detector


    Files        shortcut  description
    -----------  --------  ------------------------------------------
       Refresh    Ctrl-R   Re-scan the directory for new files

       Add        Ins      Manually include file(s) to the processing list

       Delete     Del      Remove selected file(s) from the processing list

       Rules               Open the filter dialog modify the rules of
                           inclusion of data files. (see below)

    Action       shortcut  description
    -----------  --------  ------------------------------------------
       Clean               Delete all generated detector files

       Process  Ctrl-Enter By pressing the Process button flair will run the
                           appropriate FLUKA utilities to merge the selected data
                           files from the Usrxx listbox. A dialog will confirm the
                           outcome of the operation.


   Note
   ~~~~
   The FLUKA utilities usually generate more than one output files.
   Typically the merge binary data file has the requested name while for a
   text file is generated with the extension _sum.lis, and a tabulated one
   with the extension _tab.lis


   File Selection Rules
   ~~~~~~~~~~~~~~~~~~~~
   The File Selection Rules dialog permits to user to modify the automatic
   selection criteria of the files for each output. The dialog gives the
   possibility to dynamically include or remove files from the processing
   list, by using a set of patterns. For the moment the dialog is low level
   and requires some knowledge of regular expressions. Flair automatically
   adds two default rules for each scoring file.

           {img:grab-scan_dialog.gif}

   The rules in the dialog are executed sequentially until a match is
   successful.


   Rules syntax
   ~~~~~~~~~~~~
        First character defines the action. It accepts:
              +     include a file
              -     remove a file

        The rest corresponds to the regular expression that will be checked
        for match against the file.
        Some of the most important special characters are:
              ^     beginning of the string
              $     end of the string
              .     match any character
              ?     repeat previous match zero or one time
              +     repeat previous match one or more times
              *     repeat previous match zero or more times
              \d    digit 0-9
              \D    everything but a digit
              else  any other character is matched literally

        For a complete reference please see the python regular expressions

              http://docs.python.org/lib/re-syntax.html


1******************************************************************************
  {:Calculator:}

  A scientific calculator fully compatible with FLUKA. Please look
  the section Function Evaluation F3.6 for more information on the
  functions.

{img:grab-calculator-page.gif}

  Ribbon
  ~~~~~~
    Functions    shortcut  description
    -----------  --------  ------------------------------------------
       Constants           List of predefined mathematical and physical
                           constants

       Units               List of predefined units

       Vectors             List of vector and array operations

       Particles           Masses of particles

       Functions           List of mathematical and physical functions

       Card                Cross reference function to input cards


  Editing
  ~~~~~~~
  The calculator works as a document. You can edit any function
  (even past ones) and by hitting enter the result will be updated.

  The results from the previous functions are assigned to variables
  ans* which can be used in subsequent functions.
  You have full access of the #define variables from the fluka input
  as well any other card

  All information will be saved inside the flair project and can be
  recalled at any time.

1******************************************************************************
  {:Compile:}

  The compile page allows the user to build a fluka executable by
  specifying the necessary user routines, libraries, and the linking
  program to use

{img:grab-compile-page.gif}

  Ribbon
  ~~~~~~
    Executable   shortcut  description
    -----------  --------  ------------------------------------------
       Save As             Open save dialog to select the name to save the
                           executable

       Remove              Remove the default executable from the project

       Makefile            Export compilation information to makefile


    Files        shortcut  description
    -----------  --------  ------------------------------------------
       Add        Ins      Open dialog for importing source files or
                           libraries to the create the executable

       Database            Open the "FLUKA User routines" dialog (see below)
                           for selecting and copying to the current directory
                           a FLUKA user routine from the
                           $FLUPRO/usermvax directory

       Database {img:triangle_down.gif}          Scans the input file for possible user routines
                           and propose them in a drop down listbox

       Remove     Del      Remove selected files from the list

    View         shortcut  description
    -----------  --------  ------------------------------------------
       Viewer              Open the selected files in a file viewer

       Editor     Enter    Open the selected files in a text editor

    Action       shortcut  description
    -----------  --------  ------------------------------------------
       Link                Select a linking program for FLUKA

       Clean               Remove all executable, and object files that are
                           created during the build.
                           It is highly recommended that if you are unsure
                           about the state of the individual files to press
                           always the "Clean" button before the "Build"

       Build    Ctrl-Enter Compile all source files and link the executable.
                           Build operates similarly to unit "make" command.
                           It recompiles the files ONLY if the time stamp of
                           the source if newer than the object that will
                           create. In case of uncertainty please press the
                           Clean button before.

  The main dialog contains the list of files to be used for compiling.
  Accepts the following file types:

       Type       Extension
       ---------  --------------------
       Fortran    .f, .F, .for
       C/C++      .c, .cc, .cpp
       Objects    .o
       Libraries  .a .so

  Right-clicking on the listbox it pops up a menu with the most common
  actions. On the right side the buttons provide similar functionality



  FLUKA User routines Dialog
  ~~~~~~~~~~~~~~~~~~~~~~~~~~
  The following dialog you could select and copy into the project
  directory, the templates of user routines found in the
  $FLUPRO/usermvax directory of fluka.

 {img:grab-usermvax_dialog.gif}


  Buttons
  ~~~~~~~
     "Copy to Project"   Copies the selected files to your project directory

     "Scan Input"        Scan the input file for cards that active the call
                         to user routines and select the routines. For
                         example if you have a SOURCE card in your input
                         (even disabled), this button will automatically
                         select the source.f routine

     "View"              Open the selected routines inside the viewer


1******************************************************************************
  {:Dicom:}

  DICOM = Digital Imaging and Communications in Medicine. Is a
  medical standard for distributing any kind of medical image.

  flair has a capability to process the DICOM files with the use of
  the pydicom module (available as an add-on package for your OS
  distribution) and convert them to FLUKA VOXEL or USRBIN compatible
  files.

  Normally a CT scan is composed as many DICOM z-slices, therefore
  you need to select the appropriate dataset you want to convert.
  This is done on the "1. DICOM" tab

{img:grab-dicom1-page.gif}

  Steps:
  1. First select the "Directory:" where the DICOM data sets are located.
     Flair will scan the directory and try to group the datasets based on
     the "Series Instance UID" tag in the files

    {img:grab-dicom_scan.gif}

     At the end of the scan the page will be populated with the various
     datasets.

  2. Select one of them in the "Data sets" listbox the list of DICOM
     "Slices" will be populated

  3. You can inspect the header of each slice by clicking on it and all
     the tags will be populated on the bottom text box.
     The text box is searchable with Ctrl-F

  4. By clicking on the "2. Information" tab flair will scan all slices to
     to complete the information and to verify the consistency of them.
     Flair will display the global information of the whole dataset.

     ERROR: If an error "Slice is missing" appears then it means that
     most probably a slice is reporting a different thickness than the
     others. In this case flair cannot proceed since FLUKA expects
     that all slices have exactly the same thickness.

     Please look on the output window for information on the
     problematic slice.

{img:grab-dicom2-page.gif}

  5. Next move to the "3. Voxel" tab in order to convert the dataset to
    "Voxel" or "Usrbin" format

{img:grab-dicom3-page.gif}

  6. At this point a USRBIN compatible file can be generated
     if you want to inspect the DICOM, through the geometry editor,
     USRBIN layer or with the standard flair USRBIN plotting page.

  7. To convert to DICOM two additional files/information has to be provided.
     i. a FLUKA input file with the MATERIAL/COMPOUND definitions
        The file will be appended inside the VOXEL
    ii. mapping information on how to convert the DICOM units
        (normally Hounsfield) to materials.

        This can be done by editing the table below and save it to a
        file.

   8. Click on <new> to add a new Units range

        <  Unit     specify the upper limit (+1) of the range
                    Every entry will correspond to a range from the
                    previous upper limit until the current upper
                    limit-1

        Material    select any of the predefined FLUKA materials as
                    well the ones in the Materials input loaded before

        Optionally you can specify correction factors for the density
        and dE/dx

        Crho_min    density correction factor to be applied on the
                    lower limit of the unit range
        Crho_max    density correction factor to be applied on the
                    upper limit of the unit range


        CdEdx_rel_min  relative correction factor on dE/dx for the
                       minimum unit in the range
        CdEdx_rel_max  relative correction factor on dE/dx for the
                       maximum unit in the range

   Buttons
   -------
     VOXEL            Will create the voxel file

     Card             Will insert(or update) a VOXEL card in the input
                      with the correct coordinates of the VOXEL

     USRBIN           Convert the DICOM to USRBIN file

     Card             Insert a USRBIN card to with the same
                      dimensions, binning as the DICOM

        Notes:
        ~~~~~~
          - The program will sort the Unit ranges in ascending order

          - The first entry will correspond to all units from the
            minimum in all slices to the upper limit defined by the user

          - All units above the last entry will be assigned to the same
            material as the last entry and a warning will be displayed
            on the output window

          - All intermediate units within a range will be scaled linearly

          - dE/dx is applied relative to the correction of
            density (negative WHAT(1) in CORRFACT)


1******************************************************************************
  {:Elements:}

                 Table of Isotopes for reference only
{img:grab-elements1-page.gif}


                 List of elements as table
{img:grab-elements2-page.gif}


                 Information on specific elements
{img:grab-elements3-page.gif}


1******************************************************************************
  {:Materials:}

    The material database contains about 500 predefined compounds with
    about 300 of them together with the Sternheimer parameters, damage
    thresholds and optical properties.
    You can use this database as a REFERENCE only.
    Please VERIFY always the correctness of the information

{img:grab-materials1-page.gif}

    Search:            Narrow down the list by filtering with a text
    Group:             Materials group according to their use
    Material List:     List of filtered materials

     Material Properties
     ~~~~~~~~~~~~~~~~~~~
     Title              A user defined title for the material

     Notes              A user defined notes for the material

     Names              A list of possible names to be used for the
                        material when inserted in the input

  Ribbon
  ~~~~~~
    Materials    shortcut  description
    -----------  --------  ------------------------------------------
       To Input   Double   Insert the selected materials to the FLUKA input

       Import              Import material from the FLUKA input
                           to the database. User defined materials will be stored
                           locally on the file: ${HOME}/.flair/material.ini

       Add                 Add a new material in the database

       Del                 Delete a user defined material from the database

       Edit                Edit the properties of the selected material


    Edit         shortcut  description   (when editing is activated)
    -----------  --------  ------------------------------------------
       Ok                  Save material

       Cancel              Abort editing




     Stoichiometry
     ~~~~~~~~~~~~~
{img:grab-materials2-page.gif}


     Composition        Select between "atom", "mass", "volume"
                        Automatic rescaling occurs when changing the
                        type

     State              Solid, Gas, or Liquid

     Density            Material density in g/cm3

     Table
     ~~~~~
     Z                  Atomic charge of each isotope in the compound
     A                  Atomic mass of each isotope in the compound
     El                 Isotope symbol
     Name               Name of isotope
     Frac               Atom, mass or volume fraction of the isotope

     All entries in the table are editable and either Z, El, or Name
     can be used to define the isotope

     Group              List of groups that the isotope belongs to





     Properties
     ~~~~~~~~~~
{img:grab-materials3-page.gif}


     Pressure (atm)     Pressure in atmospheres for gasses

     Rhor Factor

     Ionization Potential (eV)

     DPA Atomic Displacement Energy (eV)

     Density scaling factor for dE/dx

     Density scaling factor for other (nuclear interactions)

     Sternheimer parameters:
     ~~~~~~~~~~~~~~~~~~~~~~~
     Cbar, X0, X1, a, m, d0     (Please look the FLUKA card STERNHEI)



1******************************************************************************
  {:Output:}

  The output page contains:

    - all system messages which are written in the system standard output
    - all system commands flair is issuing
    - all gnuplot commands
    - warning and error messages

  The output is classified per command and contains only the latest
  messages. Whenever something important is written in the output
  flair notifies the user with the notification dialog F2.3

{img:grab-output-page.gif}

  Ribbon
  ~~~~~~
    Process      shortcut  description
    -----------  --------  ------------------------------------------
       Run                 Re-run the selected process

       Stop                Kill the selected process

       Clean               Clear text output

       Close               Close output page and return to previous one


1******************************************************************************
  {:Pet:}

  The PET scanner generator page allows the user to create a PET
  scanner geometry, using his own configuration or from a set of
  predefined commercial scanners.

  The geometry is composed by three components:
       i. Crystals block, a unit that contains many rectangular
          crystals
      ii. Module, repetition of crystal blocks
     iii. A repetition of the crystal modules using LATTICE around the
          patient

{img:grab-pet-page.gif}

  Ribbon
  ~~~~~~
    Templates    shortcut  description
    -----------  --------  ------------------------------------------
       Template            Select a commercial PET scanner from flair
                           templates

    Action       shortcut  description
    -----------  --------  ------------------------------------------
       Create              Create the geometry input cards


  Axes Naming:
  ~~~~~~~~~~~~
  The geometry will be generated along the Z axis on the X-Y plane.
  The naming of the axes used are the following:

     Radial     Along the radius of the scanner. Origin is at X=Y=0

     Azimuthal  Azimuthal angle of the scanner starting from X=0

     Axial      Equal to the Z-direction


  Label Frames
  ~~~~~~~~~~~~
     Block
     -----
       NR:        Number of crystals along the radial direction
       DR:        Thickness of crystals along the radial direction
       dR:        Gap between crystals along the radial direction


       Nz:        Number of crystals along the axial/Z direction
       Dz:        Thickness of crystals along the axial/Z direction
       dz:        Gap between crystals along the axial/Z direction


       NTheta:    Number of crystals along the azimuthal (theta) direction
       DTheta:    Thickness of crystals along the azimuthal (theta) direction
       dTheta:    Gap between crystals along the azimuthal (theta) direction

     Module
     ------
       MR:        Number of blocks along the radial direction
       SR:        Gap between blocks along the radial direction

       Mz:        Number of blocks along the axial/Z direction
       Sz:        Gap between blocks along the axial/Z direction

       MTheta:    Number of blocks along the azimuthal (theta) direction
       STheta:    Gap between blocks along the azimuthal (theta) direction


     Pet
     ---
       Modules:   Number of crystal modules composing the scanner

       Radius:    Inner(minimum) radius location of the crystal
                  modules

       Angle:     Opening angle for half of the PET. 180deg is
                  for a full PET system

       Material:  Material to be assigned to the crystals.

                  WARNING: the material definition is not
                  automatically inserted to the input. The user has
                  to inserted it from the database

       Region:    FLUKA region name where the scanner will be placed.
                  The region expression will be modified, all
                  crystal modules will be subtracted from it


1******************************************************************************
  {:Viewer:}

  Internal flair viewer that allows to view any text file. Special
  files like FLUKA output, scoring summary listings etc are divided
  into sections for easier browsing

{img:grab-viewer-page.gif}

  Ribbon
  ~~~~~~
    Search       shortcut  description
    -----------  --------  ------------------------------------------
       Search     Ctrl-F   Entry field for text searching

    File         shortcut  description
    -----------  --------  ------------------------------------------
       Load                Open the load dialog

       Reload     Ctrl-R   Reload current file

       Edit                Open file into the external editor

       Print      Ctrl-P   Send the file to printer

       Close      Ctrl-W   Close selected file


   F2.2} Ribbon

   The ribbon is a combined menu and tool bar. It contains all
   possible actions for the active page grouped by category and
   importance (based on frequency of usage).

{img:grab-ribbon-input.gif}

   Importance        Representation
   =========         =======================================
   High              bigger buttons with the text description
                     underneath (e.g. paste)

   Normal            standard buttons together with text description
                     on the right side (e.g. cut)

   Low               only with the standard button

   Lower             under a drop down menu (e.g. Show)
                     visible with the {img:triangle_down.gif} image

   Notes:
    - also the group labels can have a drop down menu (e.g. Filter)
    - the order of commands is arranges logically from left-to-right,
      with the most important (or execute action) on the right


  F2.3} Notification dialog

  The notification dialog appears on the lower-right corner of the
  program for a limited duration. It displays information, warnings or
  error messages and prompts the user to go to the output page to
  visualize them

             {img:grab-notification-dialog.gif}

  Colors:
     Green      normal message
     Yellow     warning
     Red        error

  Notes:
   - The window hides automatically after a certain period.
   - Moves the mouse over the window to restart the time counter.
   - Click anywhere on the window to hide it
   - Click on the button (if shown) to go to the proposed action


  F2.4} Status bar

  The status bar at the bottom of each flair window display useful
  information about the present flair project
     Inp:  The current input file. A "+" character at the end means
           that the current input has been modified
     Exe:  The default executable to use when running the input
     Dir:  The project directory
     ...   The last field display information according the active frame

 {img:grab-statusbar.gif}


   F2.5} Customization

   Mouse actions on tabs
   =====================
   Mouse             Action
   -------------     ---------------------------------------------------
   Click             on a tab to display or activate it

   Click {img:triangle_down.gif}           to display the dynamic tabs

   Ctrl-Click        to display and PIN it

   Click and Drag
      Left-Right     to re-arrange position.
                     to move to or from the dynamic position
      Up-Down        to undock on a separate window

   Double Click      to hide/display the ribbon


  Mouse actions on windows
  ========================

   Mouse             Action
   -------------     ---------------------------------------------------
   Click             on the title bar to activate

   Click and Drag    on the title bar to move and reposition the
                     window. See F2.5.1

   Click and Drag    on the separation lines between windows to resize
                     them

   {img:pin_button.gif}               pin/unpin selected page. PINning allows multiple pages
                    to be displayed at the same time inside the flair window

   {img:max_button.gif}               maximize current window

   {img:close_button.gif}               close current window



   F2.5.1} Windows tiling

   Multiple pages can be displayed at the same time. By clicking the
   pin {img:pin_button.gif} on the window title bar or by
   Ctrl-Clicking the tab.

   WARNING: only the ribbon of the active window (the one having the
            focus) will be displayed

   Once you have multiple windows you can re-arrange their position by
   dragging their title bar.


   Lets assume the following window layout
{img:grab-windows.gif}

   Possible dragging locations:
    - close to the borders of flair main window (Yellow zones in the
      following figure), to occupy half of the flair space
      (half-top, half-bottom, half-right, half-left)
{img:grab-windows1.gif}


     - close to the border of another window to occupy half of the space
       of the other window (Green zones)
{img:grab-windows2.gif}


       - in the center of another window to be swapped with the other one
         (Blue zones)
{img:grab-windows3.gif}


   F2.6} Keyboard

  The following are a list of keyboard shortcuts without a menu item.
  For all other shortcuts please look at F2.2

  Everywhere
  ------------- ---------------------------------------
  Ctrl-S {img:save.gif}		save project

  Ctrl-Z {img:undo.gif}		undo last action
  Ctrl-Y {img:redo.gif}		redo last undo

  Ctrl-X {img:cut.gif}		cut select items
  Ctrl-C {img:copy.gif}		copy select items
  Ctrl-V {img:paste.gif}		paste previously cut/copied items
  Ctrl-D {img:clone.gif}		clone selected item

  F1 {img:info.gif}		open Help for selected item
  F2		rename current object

  Ctrl-Enter    Execute highlighted command of each frame
                Input:         Insert new card
                :Compile:      Build the executable
                :Run:Run:      Run the simulation
                :Run:Data:     Merge data files
                :Plot:         Show the plot
  Ctrl-Space    Open the popup menu


  Input editor special keyboard and mouse commands
  ------------- ---------------------------------------
  Enter         Start editing field or Commit changes
                and move to next field
  Esc           Commit changes and the leave the card
                editing mode
  Tab           Move to next field
  Shift-Tab     Move to previous field
  Shift-Up      Extend selection upwards
  Shift-Down    Extend selection downward
  left-click    Select item and start editing
  right-click   Open pop up menu
  left-drag     Drag 'n drop items
  middle-drag   Pan window

  List boxes
  ------------- ---------------------------------------
  Ctrl-A        Select All
  Ctrl-Shift-A  Select None
  Ctrl-H        Search and replace text
  Ctrl-G        Find next match
  Space         Select current item

1******************************************************************************

  F3} Input

  Input editor permits the user to edit the FLUKA input file in a
  human readable way. The interface is divided into 3 section:

    - Left: the input tree divided in categories, and cards
      By clicking the appropriate branch only the cards in this
      category will be displayed.
      This tree can be minimized by dragging the splitter line or by
      Double clicking

    - Center: then main editor which displays the list of selected
      cards with mini-dialogs. The functioning of the editor is
      described in the following sections.

    - Bottom: card interpretation as it will be seen by FLUKA.
      The card interpretation highlights the changes during editing of
      the card.

      The card interpretation can be hidden by clicking the black
      arrow {img:triangle_down.gif}
      Or editing the contents of the cards in a free (non-validated
      way) by clicking the {img:edit.gif}

   While loading the input file all problematic cards will be
   highlighted with red and a message will be displayed in the output
   page.

{img:grab-input-page.gif}

  F3.1} Ribbon

{img:grab-input-ribbon.gif}

  Ribbon
  ~~~~~~

    Input        shortcut  description
    -----------  --------  ------------------------------------------
       New                 - Create a new input file (basic template)
                           - Create a new input file select template

       Load                Load an existing input file

       Save                Save input file

       Save As             Save input file with different name

       Export
       - Mcnp              Export input in mcnp format
       - Povray            Export geometry in povray format
       - OpenSCAD          Export geometry to openscad format

       Import
       - Fluka             Import cards(categories) from other input
       - Gdml              Import GDML geometry as FLUKA
       - Mcnp              Import MCNP as FLUKA input file


    Edit         shortcut  description
    -----------  --------  ------------------------------------------
     State        Ctrl-L   Toggle state of selected cards from
                           enabled/disabled

     Show                  Show or Hide selected cards

     Comment               Added, Delete the command of the selected
                           cards

     Refresh      Ctrl-R   Refresh the display

     Move Up      Ctrl-Up  Move upward by one card selected cards

     Move Down    Ctrl-Down Move downward by one card the selected cards


    Card         shortcut  description
    -----------  --------  ------------------------------------------
     Add         Ins       Add a new card from the current category
                 Ctrl-Enter  or from all categories

     Preprocessor          Insert a preprocessor card (#define...)

     Material              Select a material from the drop-down list
                           and insert all associated cards to input

     Change                Change the type of the selected cards
                           Use with caution!

     Delete       Del      Delete selected cards

     Clone        Ctrl-D   Duplicate selected cards


    Filter       shortcut  description
    -----------  --------  ------------------------------------------
     Run                   Select a run to display the active cards
                           only

     Search       Ctrl-F   Search the text string
                           The checkbox on the right enables the case
                           sensitive search

     Filter                Dynamic menu for filtering the cards based:
                             - On the WHAT(s) of the selected cards
                             - On the text entered in the search field


    View         shortcut  description
    -----------  --------  ------------------------------------------
     Viewer                Open the input file in the flair viewer

     Editor                Open the input file in an external editor

     Print                 Send to printer the displayed cards


  F3.2} Cards

  Flair is treating the input file as a list of extended cards;

  Each extended card contains:

    Comment: All commented lines preceding the card(s) as well the
             inline comments

    Tag:     The 8 character word identifying the card. All tags not
             recognized by flair will be converted to #error

    WHATs:   Multiple number of WHATs, and each one is numbered as:
               0    = sdum
               1-6  = WHAT(1)..WHAT(6) on the first line
               7-12 = WHAT(1)..WHAT(6) on the first continuation line
               ...

    Extra:   multi line string of extra information for special cards
             like REGION, TITLE, PLOTGEOM etc.

    State:   (Enable/Disable)

  Flair recognize automatically (and separates them from the
  comments) all the disabled valid FLUKA cards

  The region definition in the in geometry is emphasized by the
  presence of a card named REGION;

  All the COMPOUND cards related to one material are joined in one
  card;

  Cards are edited with the flair editor through the use of the
  mini-dialogs, forcing the user to enter the correct information
  (default);

  The user can nevertheless gain full control of the card using the
  Edit dialog (Ctrl-E);

  Flair will try to find the best floating point representation of
  each number, to ensure the maximum accuracy; number of digits that
  fits in the specific width (10 for the fixed format, 22 for the free
  format).

  Function evaluation: a field value starting with = will force flair
  to evaluate its content as a function e.g.

        BEAMPOS     x: =2*10+length

  Flair will create a valid fluka input containing the evaluation of
  the formula and keep the formula inside the comments as

        !@what.1 =2*10+length

   Look the Function Evaluation F3.6 for more details


  F3.2.1} Card Groups

  FLUKA cards in flair are grouped into the following categories for
  easier accessing and more flexible editing of the input file:


   Category      Description
   ----------   -------------------------------------------------------
   General      Cards of general purpose (like TITLE, DEFAULTS, GLOBAL, etc..)

   Primary      Cards dealing with the definition of the primary starting particles

   Geometry     Cards related to the definition of the geometry bodies,
                regions, lattices plotting and rotations/translations

   ...Bodies    Subcategory containing only the bodies definitions

   ...Transformations  subcategory with only the geometrical
               transformation cards

   Media        Cards for the definition of materials

   Physics      Cards defining physics properties for the simulation

   Transport    Cards that modify the way particles are transported in FLUKA

   Biasing      Cards for importance biasing definition

   Scoring      Cards related to scoring

   Preprocessor Preprocessor definitions for creating conditional input files


   Tree Structure
   ==============

   + Input              Display the Input Editor complete file
   |
   +--- General         Display only cards in the General category
   |
   +--- Primary                 -//-   Primary category
   |
   +--+ Geometry                -//-   Geometry category
   |  |
   |  +--- Bodies               -//-   Bodies category
   |  |
   |  +--- Transformations      -//-   Bodies transformations
   |
   +--- Media                   -//-   Media category
   |
   +--- Physics                 -//-   Physics category
   |
   +--- Transport               -//-   Transport category
   |
   +--- Biasing                 -//-   Biasing category
   |
   +--- Scoring                 -//-   Scoring category
   |
   +--- Developers              -//-   Developers category
   |
   +--- Preprocessor            -//-   Preprocessor category



  F3.2.2} Card Anatomy

  Each card in flair has a dedicated mini dialog (currently using 4
  columns), which interprets in a human readable way all information
  stored in the card

  The BEAM card in FLUKA appears as
{img:grab-card-fluka.gif}

  And in flair it will displayed as
{img:grab-card-flair.gif}

  Continuation cards like USRBIN with sdum:&, COMPOUND cards that
  expand in multiple lines in flair will appear as a single card

{img:grab-card-usrbin.gif}

{img:grab-card-compound.gif}


  F3.3} Editing

  The editing interface works like PowerPoint, you can apply commands
  to the card as a whole (copy, paste, clone...) or to the contents of
  the card, on each individual field

  Therefore there are two modes:
    1. Card mode: manipulate the cards as a unit (e.g. to copy, paste,
       delete, change order of cards);

    2. Edit mode: manipulate the contents of the card.

  Edit mode is activated immediately after adding a new Card,
  by hitting Enter or with the mouse click.

  To leave edit mode click the Esc or with the mouse click somewhere else.

  The active item (what) is highlighted with a grey rectangle and
  highlighted also in the card viewer below the editor.

  A range of cards can be selected with:
    - Shift + Mouse ;
    - Shift + Up/Down arrows;


  F3.4} Validation

  Flair validates the input file while loading and each card during
  editing;

  Errors are highlighted in red;

  For the moment only syntactical errors are checked, and a few
  logical errors;

  The card interpretation at the bottom of the window shows the error
  messages for the current card, as well what is expected as correct value;

  From the Ribbon->Filter you can Filter on the Invalid cards to see
  all problematic cards


  F3.5} Keyboard

  Useful Keyboard shortcuts:
        Ctrl-Enter   Insert a new card
        Ctrl-Space   Open popup menu
        Right-click  Open popup menu
        Double-click Selects word or similar cards
        Ctrl-T       Transform bodies
        Ctrl-E       Edit manually card through edit dialog
        Ctrl-I       Inverse visibility (Hide/Show)
        Ctrl-F2      Show General   category
        Ctrl-F3      Show Primary   category
        Ctrl-F4      Show Geometry  category
        Ctrl-F5      Show Media     category
        Ctrl-F6      Show Physics   category
        Ctrl-F7      Show Transport category
        Ctrl-F8      Show Biasing   category
        Ctrl-F9      Show Scoring   category


  F3.6} Function evaluation

   Flair has the ability to evaluate functions in the place of
   numerical values in the CARD's what. Functions can be defined
   by entering the expression starting with the equal sign '='

   The same function evaluation can be used on the built-in calculator
   frame (under Tools). The expression is evaluated with the press of
   [Return] key.
   [Shift-Return] to add an extra line. To show that this is a
   continuation line insert a space character in front.

   e.g.	   Dx: =1.5*mm*fwhm
         cosx: =sind(ang)
         with ang defined as "#define ang 10" with a previous card

   Set in the BEAM card the beam size to 1.5mm in FWHM
   The functions are kept in the input file as special decorator
   comments preceding the card with the format
   !@what.#=<func>

   The input file will be saved as:
   !@what.4=1.5*mm*fwhm
   BEAM           -20.0 -0.082425     -1.7 .353223007                 1.0PROTON
   *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....

   The special functions w(), b() and C() allow the user to refer to
   whats from the current card, another body card or any other card in
   the input file
   e.g
        * create a symmetric box around 0. All [XYZ]max are the
        * positive of the [XYZ]min
        RPP box        Xmin:-10          Xmax:=-w(1)
                       Ymin:-20          Ymax:=-w(3)
                       Zmin:-30          Zmax:=-w(5)

        * create a plane using the what(6) of body 'box' plus 2mm
        XYP PlaneZ        Z:=b(box,6)+2*mm
        * or using the C() function
        XYP PlaneZ        Z:=C(RPP,box,6)+2*mm

   NOTES:
     1. During loading of the input file in such a decorator is found
        then corresponding what will be replaced by the function
        expression.
     2. During saving of the input file the card will be written with
        the decorator comment preceding it and the correct numerical
        evaluation of the function.
     3. WARNING. If you manually change the numerical value in the input
        file with an editor, then next time you open through flair it
        will replace the value with the function evaluation.
     4. What's where the sign is controlling the type of the value
        have to be manually inserted by the user and not by flair with
        the drop down box.
        For example in BEAM what(1) if positive means momentum, negative
        is energy. By entering a function in what(1) the drop down box
        in flair controlling the sign will be ignored.
     5. Function can return also a string value e.g. a material name
        for dynamic material substitution
               #define MAT    CARBON
        and later in the code
               ASSIGNMAT  =MAT      MYREGION
     6. Due to limitation in processing speed of python, all #define are
        evaluated once. Therefore multiple #define will be overridden
        with the last value. This functionality is due to change
        in the future if a way is found.


   Global Variables and Functions
   Name	Value
   -----	-------
   a	1/137.035989561			Fine constant
   pi	3.1415926535897931
   e	2.7182818284590451
   c	299792458e2			Speed of light cm/s
   Na	6.0221367e23			Avogadro number
   re   2.8179409183694872d-13		electron radius
   qe	1.60217646E-19			Electron charge
   fwhm	2*sqrt(2*log(2)) = 2.3548200450309493

   amu	0.93149432
   amuC12	0.93123890
   amugr	1.6605402E-24
   Mp	0.93827231			proton mass in GeV
   Mn	0.93956563			neutron mass in GeV
   Me	0.510998910e-3			electron mass in GeV

   nm	0.1E-6
   um	0.1E-3
   mm	0.1
   cm	1
   dm	10
   m	100
   km	100E3

   inch	2.54
   feet	30.48		or ft
   mile	160934.4	or mi

   ns	1.0e-9
   us	1.0e-6
   ms	0.001
   s	1
   min	60
   hour	3600
   day	86400
   week	7*86400
   month	365.25/12*86400
   year	365.25*86400

   eV	1e-9
   keV	1e-6
   MeV	1e-3
   GeV	1.0
   TeV	1e3
   PeV	1e6
   J    eV/qe

   Metric
   ~~~~~~
   yotta  1e24
   zetta  1e21
   exa    1e18
   peta   1e15
   tera   1e12
   giga   1e9
   mega   1e6
   kilo   1e3
   hecto  1e2
   deca   1e1

   deci   1e-1
   centi  1e-2
   milli  1e-3
   micro  1e-6
   nano   1e-9
   pico   1e-12
   femto  1e-15
   atto   1e-18
   zepto  1e-21
   yocto  1e-24


   Mass of particles
   -----------------
   To get the mass of particles as defined in FLUKA use the name
   particle name prefixed with the letter m
   Suffic +/- is replaced with p/n
   Intermediate - are removed
   e.g.      PROTON mass   = mPROTON
             4-HELIUM mass = m4HELIUM
             MUON- mass    = mMUONn
             MUON+ mass    = mMUONp


   Physics functions
   -----------------
   p2T(p,m)             convert momentum in kinetic energy
   T2p(T,m)             convert kinetic energy to momentum
   dT2dp(T,dT,m)        convert kinetic energy spread into momentum spread
   T2g(T,m)             convert kinetic energy to relativistic gamma
   g2b(g)               gamma to beta
   X0(Z,A)              radiation length in g/cm2

   Card reference functions
   ------------------------
   w(n)         return the n'th what of current card
   b(n,w)       return the w'th what of body named 'n'
                b(BLKBODY,4) - return what(4) of BLKBODY
   C(t,n,w)     return the w'th what of card tag 't'
                with sdum 'n' if n is string
                or ordered 'n' if n is integer
                C(BEAM,0,1) - return BEAM energy of first BEAM card
                C(USRBIN,enedep,1) - return what(1) of USRBIN with
                sdum=enedep

   Mathematic Functions
   --------------------------
   acos(x)              radian based trig functions
   asin(x)
   atan(x)
   cos(x)
   sin(x)
   tan(x)

   acosd(x)             degrees based functions
   asind(x)
   atand(x)
   cosd(x)
   sind(x)
   tand(x)

   atan2(x,y)           return arctan(x/y)

   omega(x)             return solid angle for x-radians polar angle
   omegad(x)            return solid angle for x-degrees polar angle

   radians(x)           convert degrees to radians
   degrees(x)           convert radians to degrees

   acosh(x)             Hyperbolic functions
   asinh(x)
   atanh(x)
   cosh(x)
   sinh(x)
   tanh(x)

   exp(x)               Exponential e**x
   log(x)               Natural logarithm of x
   log1p(x)             log(1+x)
   log10(x)             Logarithm based 10 of x
   sqrt(x)
   pow(x,y)             x**y
   factorial(n)         n!

   ceil(x)              ceiling, smallest integral variable >= x
   copysign(x,y)        return x with sign of y
   abs(x)               absolute value of x
   floor(x)             largest integral variable <= x
   fmod(x,y)            module x % y
   hypot(x,y)           hypotenuse sqrt(x**2+y**2)
   trunc(x)             return the nearest integral towards 0

   Vector operations
   ~~~~~~~~~~~~~~~~~
   Vectors can be defined as
        Vector(x,y,x)
   or with curly brackets
        {x, y, z}

   Operators:
        + -             addition/subtraction of two vectors a+/-b
        *               scale with a number 2.0*a
        * dot           dot product a*b   or a.dot(b)
        ^ cross         cross product a^b  or  a.cross(b)
        length()        length of vector a.length()
        norm()          normalize vector
        x(), y(), z()   return x, y or z component
        orthogonal()    return a vector orthogonal to current
        direction()     return string describing direction X/Y/Z
        phi()           return azimuthal angle of vector
        theta()         return polar angle of vector
        perp()          return perpendicular component of vector

   Arrays, tuples and lists
   ~~~~~~~~~~~~~~~~~~~~~~~~
   [1,2,...]            [] define lists or arrays which are mutable
   (1,2,...)            () defines tuples which are immutable
   LIST[index]          [index] returns the index item of list
   TUPLE[index]         [index] returns the index item of list

   Tuples can be used for multiple runs with different materials
   assigments e.g.

   #define MATS ('LEAD', 'GOLD', 'SILICON', 'COPPER')
   #define I    0
   ASSIGNMAT  =MATS[I]  REGION

   and I can be used as a Loop variable from the Runs Frame to loop
   from 0..2


1******************************************************************************

  F4} Geometry

     Geometry Editor is an addition to flair for viewing/debugging and
     editing FLUKA geometries in a graphical way. It works on 2D cross
     sections of the geometry with some 3D capabilities. 2D might
     seems a handicap but is not a big problem since most of the objects
     are 2D and extruded in the 3rd dimension

     Pros
     - Fast display of complex geometries;
     - Many user-customizable layers;
     - Graphical editing of the bodies with snapping mechanism to generate
       accurate coordinates;
     - Visual selection and editing of zones w/o the need to know the
       orientation of bodies;
     - Use real curve of bodies with no conversion to vertices/edges;
     - Interactive debugging with information of problematic bodies, regions
       and/or zones;
     Cons
     - Tricky to orientate in an unknown geometry;
     - Difficult to find region using the expression;

     The module can be started from flair by pressing the F4 button or
     from "Menu->View->Geometry Editor".
     The interface looks similar with flair

  {img:grab-geometry-page.gif}

     On the left side there are 3 tabs
        Geometry     Contains information on the bodies, regions,
                     materials, transformations and flair objects.
                     It has two listboxes for filtering, selecting
                     and editing the displayed information

        Layers       Customize the various display layers F4.13

        Errors       Error information during loading or plotting
                     of the geometry.

     In the main display there are 4 viewports named:

        "Red", "Green", "Blue" and "Magenta".

     identified by their color on the maximize button


   F4.1} Ribbon

{img:grab-geometry-ribbon.gif}

  Ribbon
  ~~~~~~

    Tools        Shortcut  Description
    -----------  --------  ------------------------------------------
     Select          s     Select/modify bodies, regions or viewports
                           Several combinations with Control and Shift keys

     Pan             x     move viewport

     Orbit           t     orbit viewport

     Info            i     display geometry information on mouse position
                           region, lattice, material, usrbin values, etc...

     Zoom In         z     zoom in. Clicking will zoom x2 or select
                           the region to zoom by drawing a rectangle. To unzoom
                           hold the Control key and click or draw a rectangle

     Zoom Out        Z     zoom out (the opposite of zoom in)

     Zoom On         f     zoom on selected objects (find)

     Edit            e     Correct overlaps on selected zone on current
                           viewport.

     Paint           p     multiple setting of a value by painting
                           (e.g. MATERIAL, BIASING etc...)

     Center          C     center the other three viewports on the
                           position of the mouse click

     Snap                  Enable smart snapping on grid and on body
                           intersections


    Add          Shortcut  Description
    -----------  --------  ------------------------------------------
     Body          b,space  Add new body
                    B      replicate last body added

     Zone           d      Add new zone, to an existing region.
                           If no region is selected a new region
                           will be created first

     Region         R      Add new region

     Object        space   Add new object


    Select       Shortcut  Description
    -----------  --------  ------------------------------------------
    Visibility       v     Toggle visibility of objects

    Wireframe        #     Toggle wireframe on bodies

    Lock             l     Toggle lock/unlock bodies graphical editing

    Freeze           F     Freeze/Unfreeze selection of bodies


    View         Shortcut  Description
    -----------  --------  ------------------------------------------
    Run                    Select active run from the drop-down list

    Layer                  Change layer on all viewports

    Layout         w,W     Change viewports layout

    Reload        Ctrl-R   Reload input and project file

    Export        Ctrl-P   Export selected viewport to image

    Notes         Ctrl-N   Export selected viewport to image
                           and inserted it into the project notes


    Context Tabs
    ~~~~~~~~~~~~
    Context tabs depending on the current selection

    Body         Shortcut  Description
    -----------  --------  ------------------------------------------
    Transform     Ctrl-T   Geometrical transformation dialog for bodies

    Expand                 Expand macro bodies to infinite ones.
                               RPP,BOX in 6 planes
                               RCC     in 2 planes + 1 inf cylinder
                               REC     in 2 planes + 1 inf ell cylinder


    Region       Shortcut  Description
    -----------  --------  ------------------------------------------
    Material      Ctrl-M   Edit material properties of selected regions

    Volume                 Run a Quasi Monte Carlo program to calculate
                           the volumes of the selected regions

    Expand                 Expand parenthesis if any.
                           WARNING use with care can take long or explode
                                   the memory


    Popup Menu
    ~~~~~~~~~~
    Item         Shortcut  Description
    -----------  --------  ------------------------------------------
    Go to Lattice      L   When a lattice region is selected, it
                           moves to the implementation of the prototype

    Zoom On Selected   f   Tries to zoom viewport on selected items


   F4.2} Keyboard Map

   Key    Meaning
   ===    ===========================
   a      small [a] alone
   A      capital [A] = Shift + a
   C-a:   Control + a (small)
   C-A:   Control + Shift + A  (capital)
   A-<-:  Alt + <- left key

   Control-Tab: Rotate on windows

  Left side of keyboard
  ~~~~~~~~~~~~~~~~~~~~~
 +------------++------------++------------++------------++------------+
 |Esc escape  ||F1   help   ||F2   rename ||F3 L:media  ||F4 L:3D     |
 +------------++------------++------------++------------++------------+
 +------------++------------++------------++------------++------------+
 | ~          || 1          || 2          || 3          || 4          |
 | `          || !          || @          || # layout2x2|| $          |
 |            ||C-1  X:Y    ||C-2  -X:Y   ||C-3  Z:X    ||C-4 -Z:X    |
 +------------++------------++------------++------------++------------+

 +------------++------------++------------++------------++------------+
 | q          || w  layout  || e   edit   || r  rotate  || t  orbit   |
 | Q          || W  maximize|| E   correct|| R  REGION  || T          |
 |C-q quit    ||C-w close   ||C-e         ||C-r redraw  ||C-t transform
 |C-Q         ||C-W         ||C-E         ||C-R         ||C-T         |
 +------------++------------++------------++------------++------------+
        +------------++------------++------------++------------+
        | a  sel.all || s  select  || d  def.zone|| f  find    |
        | A  unselect|| S          || D          || F  freeze  |
        |C-a sel.all ||C-s save    ||C-d clone   ||C-f find    |
        |C-A unselect||C-S         ||C-D deep-cln||C-F         |
        +------------++------------++------------++------------+
               +------------++------------++------------++------------+
               | z  zoom-in || x  pan     || c center x1|| v  visible |
               | Z  zoom-out|| X  layer   || C center   || V visibility
               |C-z undo    ||C-x cut     ||C-c copy    ||C-v paste   |
               |C-Z redo    ||C-X         ||C-C         ||C-V special |
               +------------++------------++------------++------------+
                                           +---------------------------
                                           | space      insert
                                           |C-space     popup-menu
                                           +---------------------------



  Right side of keyboard
  ~~~~~~~~~~~~~~~~~~~~~~
 +------------++------------++------------++------------++------------+
 |F5 L:Lattice||F6  layer-5 ||F7  layer-6 ||F8 layer-7  ||F9 layer-8  |
 +------------++------------++------------++------------++------------+
 +------------++------------++------------++------------++------------+
 | 5          || 6          || 7          || 8          || 9          |
 | % wireframe|| ^          || &          || *          || (          |
 |C-5  Z:Y    ||C-6 -Z:Y    ||C-7         ||C-8         ||C-9         |
 +------------++------------++------------++------------++------------+

        +------------++------------++------------++------------++------------+
        | y          || u          || i          || o  origin  || p  point   |
        | Y          || U          || I          || O origcycle|| P          |
        |C-y         ||C-u         ||C-i         ||C-o         ||C-p export  |
        |C-Y         ||C-U         ||C-I         ||C-O         ||C-P         |
        +------------++------------++------------++------------++------------+
 +------------++------------++------------++------------++------------+
 | g  grab    || h          || j          || k          || l  lattice |
 | G  snap    || H          || J          || K          || L  (un)lock|
 |C-g         ||C-h         ||C-j         ||C-k         ||C-l layers  |
 |C-G         ||C-H         ||C-J         ||C-K         ||C-L         |
 +------------++------------++------------++------------++------------+
        +------------++------------++------------++------------++------------+
        | b  body    || n  rename  || m material || ,          || .  repeat  |
        | B  Brepeat || N          || M          || <  prev    || >  next    |
        |C-b         ||C-n notes   ||C-m edit-mat||            ||            |
        |C-B         ||C-N         ||C-M         ||            ||            |
        +------------++------------++------------++------------++------------+


  Symbols
  ~~~~~~~
 +------------++------------++------------+
 |F10  ribbon ||F11  tree   ||F12 maximize|
 +------------++------------++------------+
 +------------++------------++------------++------------+
 | 0          || - zoom-out || + zoom-in  || <- Delete  |
 | )          || _ zoom-out || = zoom-in  ||            |
 |C-0 center0 ||            ||            ||            |
 +------------++------------++------------++------------+

         +------------++------------++------------+
         | [          || ]          || \          |
         | {          || }          || |          |
         +------------++------------++------------+
  +------------++------------++------------+
  | ;          || '          || Entr       |
  | :          || "          || C-E Insert |
  +------------++------------++------------+
         +------------+
         | ?          |
         | /          |
         +------------+



  Arrows
  ~~~~~~
 +------------++------------++------------+
 |Ins         ||Home        ||PgUp        |
 | insert     ||  center    ||   pan-back |
 |            ||            ||            |
 |            ||            ||C-Up  rotZ  |
 +------------++------------++------------+
 +------------++------------++------------+
 |Del         ||End         ||PgDn        |
 | delete     ||            ||  pan-front |
 |            ||            ||            |
 |            ||            ||C-Dn -rotZ  |
 +------------++------------++------------+
               +------------+
               |up  pan-up  |
               |            |
               |C-up rot-X  |
               |A-up mvup   |
               +------------+
 +------------++------------++------------+
 |<-  pan-left||dn  pan-down||-> pan-right|
 |            ||            ||            |
 |C-<  -rotY  ||C-dn -rotX  ||C->  rotY   |
 |A-<  mvleft ||A-dn mvdown ||A->  mvright|
 +------------++------------++------------+


Explanation:
    X:Y        - change viewport basis to X:Y
    Z:X        - change viewport basis
    Z:Y        - change viewport basis
   (un)lock    - toggle lock editing flag
   +/-. 0..9*/ - used for entering coordinates while moving objects
   -X:Y        - change viewport basis
   -Z:X        - change viewport basis
   -Z:Y        - change viewport basis
   body        - insert a new body
   Brepeat     - repeat insertion of last body
   center      - center all viewports tool (multiple times)
   center x1   - center all (others apart 3D) viewports to mouse location only once
   center0     - move viewport to origin (0,0,0)
   clone       - clone selected objects
   close       - close current window or flair
   copy        - copy to clipboard selected objects
   correct     - editing mode for correcting overlapping geometries
   cut         - cut to clipboard selected objects
   deep-cln    - deep clone, e.g. for a region will clone all bodies as well
   def.zone    - define a new zone or redefine a selected zone
   Delete      - delete selected objects
   edit        - set keyboard focus to the active element on properties listbox to edit
   edit-mat    - edit material of selected region
   export      - export viewport to a plot
   find        - move viewport to select objects
   freeze      - freeze selection of objects. Selected objects will be used
                 in all zone editing operations
   grab        - grab and move selected objects
   insert      - open insert popup menu
   L:3D        - display the 3D layer
   L:lattice   - display the lattice layer
   L:media     - display the media layer
   insert-menu - open insert menu
   lattice     - go to lattice prototype definition
   layer       - cycle layers on selected viewport
   layers      - open layers toolbar and select current viewport layer
   layout      - cycle viewport layout
   layout2x2   - go to 2x2 layout
   material    - change the material of selected region
   maximize    - maximize current viewport
   mvdown      - move selected body downwards (with Shift finer move)
   mvleft      - move selected body leftward (with Shift finer move)
   mvright     - move selected body rightward (with Shift finer move)
   mvup        - move selected body upwards (with Shift finer move)
   next        - move to next location in geometry
   notes       - insert current viewport as an image in project notes
   orbit       - orbit viewport tool
   origin      - toggle origin toolbar
   origincycle - cycle origin toolbar
   pan         - pan viewport tool
   pan-back    - pan viewport towards the viewer
   pan-down    - pan viewport downwards
   pan-front   - pan viewport away from the viewer
   pan-left    - pan viewport leftward
   pan-right   - pan viewport rightward
   pan-up      - pan viewport upwards
   paste       - past from clipboard
   point       - insert a point
   popup-menu  - open popup menu (like right click)
   prev        - move to previous location in geometry
   quit        - close flair
   repeat      - repeat last action
   redo        - redo last undo
   redraw      - redraw current viewport
   REGION      - add a new region
   rename      - change the name of the selected item
   ribbon      - move focus to the ribbon bar
   rotate      - rotate selected objects
   rotX        - rotate around vector towards the right
   -rotX       - rotate around vector towards the left
   rotY        - rotate around vector towards the up
   -rotY       - rotate around vector towards the down
   rotZ        - rotate around vector towards the viewer
   -rotZ       - rotate around vector away from the viewer
   save        - save all files to disk
   sel.all     - select all objects in geometry
   select      - select tool
   snap        - toggle snapping on grid and points
   special     - paste special (like deep cloning)
   tools       - toggle visibility of left side tools
   transform   - open geometry transformation dialog
   undo        - undo last edit
   unselect    - unselect all selected objects
   visi-All    - toggle visibility flag on all objects
   visible     - toggle visibility flag for selected objects
   visibility  - toggle visibility/transparency of region
   wireframe   - toggle display of wireframe
   zoom-in     - zoom in viewport tool
   zoom-out    - zoom out viewport tool


    Mouse Modifiers:
        Shortcut        Description
        --------        -----------
        Ctrl            "controls" or changes the action
        Shift           aligns to grid, or to intersections of bodies
        ESCape          cancels the active action, selection of
                        bodies, zones

    Mouse:
        Shortcut                Description
        --------                -----------
        Left button             User selectable action from the tools

        Middle button
           click                Centers viewport to hit object
                                The hit distance is used for rotation as well
           drag-alone           Pan/Move viewport
           +Shift               select rectangle area and zoom into
           +Shift+Ctrl          select rectangle area and zoom out
           +Ctrl                rotate projection using a virtual trackball
           +Ctrl+Shift          rotate projection using a virtual
                                trackball with steps of 15 deg

        Right button
           alone                brings up the pop-up menu
        (or Ctrl-Spacebar):

           +Shift               Pan/Move viewport
           +Ctrl                rotate projection using a virtual trackball

        Mouse Wheel
           alone                Zoom In/Out current viewport by 20%
           +Shift               Zoom In/Out current viewport by 2%
           +Ctrl                Move current viewport forward/backwards
           +Ctrl+Shift          Moves viewport with smaller intervals

      Note: Ctrl+Shift is different than Shift+Ctrl. The order is
      important which key is pressed first when the mouse action
      starts
      e.g   Ctrl + Middle-Button        Starts the rotation then pressing
                 + Shift                while continue the rotation
                                        aligning to 15deg intervals
            Shift + Middle-Button       Starts drawing the rectangle
                                        for zooming in
                  + Ctrl                Changes the direction of the
                                        zoom to Out

      When laptop mode is enabled in the Configuration F6 then the
      middle and right buttons are swapped

   F4.3} Listboxes

     There are two listboxes on the left side of the window:

     Top: Object Listbox
         The top is named object listbox and it contains a list of objects,
         with their type and name.
         Text coloring:
           Red       Error in the card description
           Magenta   Visible body/object
           Orange    Selection locked

         On the top there is a filter text box that can narrow the list
         with items containing the typed-in text.
         The Checkbuttons on the top of the list box can switch on/off
         of various object categories

         {img:TRC.gif}	Bodies
         {img:REGION.gif}	Regions
         {img:ROT-DEFI.gif}	Transformations (ROT-DEFI)
         {img:pin.gif}	Objects (like point, arrows, rulers, lights)
         {img:select.gif}	Narrow the selection to only the selected or visible items
         {img:clear.gif}	Clean the selection

         Notes:
         -  Selecting any item on the list box is equivalant as selecting
            graphically the objects
         -  Double clicking the name or with [Ctrl-E] you can rename
            the object directly on the object listbox

      Bottom: Properties & Attributes listboxes, that display/edit the
      selected cards properties: whats,sdum()), or attributes:additional
      information that is linked with the selected object often through
      other fluka cards. e.g. Transformations for the bodies or
      LATTICE transformations, importances for REGIONS

      When selecting multiple objects, bodies, regions only the common
      properties will be displayed

      Properties:
	- Bodies:
	   - name
	   - preceding comments
	   - type
	   - card what(s)

	   - variables starting with "@" show functions that can alter
	     multiple whats
	         @Xmid    X-coordinate of geometrical center
	         @Ymid    Y-coordinate of geometrical center
	         @Zmid    Z-coordinate of geometrical center
	         @Dx      X dimension
	         @Dy      Y dimension
	         @Dz      Z dimension
	         @Rx      X radius for elliptical cylinders
	         @Ry      Y radius for elliptical cylinders
	         @H       height of cylinder, cone, elliptical cylinder
	         @Rmajor  Major axis of ellipsoid
	         @Rminor  Minor axis of ellipsoid
	         @azm     Azimuthal angle of normal or Z vector in (RCC,TRC,REC)
	         @polar   Azimuthal angle of normal or Z vector in (RCC,TRC,REC)

	     It can be extremely handy to define precisely the size of
	     along a direction objects

	- Regions:
	   - name
	   - preceding comments
	   - (Attribute) assigned material
	   - list of zones

	- Objects:
	   - name
	   - preceding comments
	   - type
	   - option (e.g. type of arrow, ruler, or light)
	   - anchor (text location)
	   - size in pixels
	   - drawing color
	   - x,y,z position
	   - dx,dy,dz direction
	   - ... variable properties depending on the object

      Attributes:
	- Bodies:
	   - name
	   - visibility setting
	   - locking flag
	   - visibility flag
	   - bounding box
	   - 3d wireframe
	   - translation dx,dy,dz
	   - expansion
	   - transformation

	- Regions:
	   - name
	   - locking flag
	   - bounding box
	   - transparency (alpha-channel) for 3D
	   - naz (neighbors contiguity list size)
	   - rotdefi - associate ROT-DEFI card through LATTICE
	   - importances for All particles, Hadrons, EMF and Low energy neutrons

	- Objects:
	   - visibility setting

      Tips:
       - [Enter] moves to the next field
       - Typing multiple values splits them into many fields:
         e.g. x: 1 2 3 [Enter]
         will split it to x: 1, y: 2, z: 3


   F4.4} Viewports

     Viewports
     **********
     There are 4 viewports named: "Red", "Green", "Blue" and "Magenta",
     identified by the color on the maximize button, on the top right corner.
     The cross section of each viewport is represented on the other
     viewports with a dash line (viewport-line). The projection of the
     center is represented with a small square. See section F4.5 for
     navigating in the viewports


     Axes System
     ***********
     Each viewport is identified by its:
     1. origin   center of the viewport
     2. basis    relative axes system u, v, w.
                 w is coming out of the screen towards the user
     3. extends  zoom
                      {img:viewport-axes.gif}

     Note:
     - The user is looking the negative -w of each viewport
     - If bodies A, B are touching the viewport like on the plot.
       Only the body B will be visible to the viewer
                   {img:viewport-touching.gif}


   F4.5} Navigating

     There are several means of navigation in the viewports
     1. keyboard             F4.5.1
     2. left-mouse button    F4.5.2
     3. middle-mouse button  F4.5.3
     4. viewport lines       F4.5.4
     5. projection dialog    F4.6



   F4.5.1} Keyboard
   ***************************

     Each viewport can be navigated with the keyboard once the mouse
     cursor is over the viewport

     Keys                Action
     -----               -------------------------------
     [arrows]            pan viewport
     Ctrl + [arrows]     orbit viewport around u,v axes
          + [Shift]      rotates by 90 deg.
     Page Up/ Page Down  pan viewport front/back
     Ctrl + PgUp/PgDn    orbit viewport around w axis
     =(+) / -            zoom in / zoom out
     o                   open projection dialog F4.6 to set the
                         origin/basis/save/recall etc...
     Ctrl-0 (zero)       Center to origin
     Ctrl-1, Ctrl-2      front [X:Y] / back   [-X:Y]
     Ctrl-3, Ctrl-4      left  [Z:Y] / right  [-Z:Y]
     Ctrl-5, Ctrl-6      top   [Z:X] / bottom [-Z:X]



     Naming
     ~~~~~~
     Viewport naming assumes
         Z = direction of the beam (horizontal)
         X = horizontal
         Y = vertical


   F4.5.2} Mouse
   ************************************

   The viewports can be navigates with the Left Mouse button by
   selecting before the appropriate action

    Icon	Action	Key	Description
    ----	------	---	------------------------
    {img:pan.gif}	Pan	x	Move viewport
    {img:zoom.gif}	Zoom	z	zoom in/out. Clicking will zoom x2 or select
			the region to zoom by drawing a rectangle. To unzoom
			hold the Control key and click or draw a rectangle
    {img:rotate.gif}	Orbit	t	orbit viewport

    Note:
    - The default select action can be achieved with the {img:select.gif} icon
      or with the shortcut [s]



   F4.5.3} Middle Mouse button
   **************************************

   A more handy way of navigating is with the use of the middle mouse
   button (or the right one in case of two, by activating the
   appropriate preference see below)

   Pressing the middle mouse button, alone or with the following keys

   Keys                Description
   -----               -----------------------------------------------
   alone               Pan/Move viewport

   + Right mouse       Orbit viewport

   + Ctrl              orbit projection using a virtual trackball

   + Ctrl-Middle-Shift orbit projection using a virtual trackball with
                       steps of 5 degrees

   + Shift             select rectangle region and zoom into

   + Shift-Middle-Ctrl select rectangle region and zoom out

   With the mouse wheel alone you can zoom in/out.
   Ctrl + Wheel        pan/move forward or backward
   Ctrl+Shift+Wheel    smoother pan/move forward/backward

   Shift + Wheel       resize-cursor: when a body is selected
                       the drag cursor dimensions can be changed
                       with Shift + Wheel


   Right mouse button
   ******************
   + Shift             Pan/Move viewport
   + Ctrl              orbit

   Notes:
   1. Middle and Right button can be swapped by activating the
      laptop mode in the Preferences/Geometry
   2. Wheel sense of zooming can be modified in the
      Preferences/Geometry
   3. You are required to restart the Geometry Editor after changing
      the mouse preferences



   F4.5.4} Viewport lines
   *********************************

     Each Viewport if visible in the other viewports it appears as a
     dashed colored line with a small rectangle showing the center of
     the viewport.

{img:grab-viewports.gif}

     Using the select cursor {img:select.gif} you can move the
     viewport lines which will result in moving the viewport. Each
     line has several handles where actions can take place

       {img:grab-viewportline.gif}

     Dashed lines represent the other viewport's cross section on the
     current plot. The center is represented with a square.
     When the other-viewport is outside the view window, the viewport-line
     will be displayed on the closest edge.

     Actions (select-tool {img:select.gif} + left mouse)
       - drag the center square (red square on the figure) to reposition
         the viewport
       - drag the line close to the center (green line) to reposition
         the viewport along the vertical axis-w of the viewport
       - drag the extremities (magenta on the figure) of the viewport-line
         to rotate the viewport
       - drag+shift the extremities (magenta on the figure) of the viewport
         to rotate by 5deg.
     Press ESCape during dragging to cancel the action

     Note:
     - When repositioning the center of a viewport, the center is moved
       to lie on the current viewport. If you want to reposition the
       center without moving on the current viewport click the Control
       button at the same time



   F4.6} Projection
     The projection frame allows the user to quickly and accurately
     place the location, zoom, orientation of the viewport as well
     to save and recall (bookmark) locations in the geometry

            {img:grab-geometry-projection1.gif}

     The dialog shows/hides with the  has the following tabs
     Press <Return> or the {img:ok.gif} to apply the change

     [Origin]  move the center of the viewport to
           x:   center of viewport
           y:        -//-
           z:        -//-

    [Extends]   zoom viewport by setting the Du extends
          Du:   half width of the horizontal axis
          Dv:   half height of the vertical axis (Read-only)

       [Move]   move relative to current projection the center by
          +u:   along the u (horizontal axis)
          +v:   along the v (vertical axis)
          +w:   along the w (towards the viewer axis)

      [Basis]   quickly set the axis-basis of the plot
    ux,uy,uz:   u vector components.
                Note: it doesn't have to be normalized to 1.0
    vx,vy,vz:   v vector components
          x-y,  z-x,  z-y
          swap  swap orientation u <-> v
          -u    inverse u
          -v    inverse v

      [Euler]   define the orientation by entering the Euler rotations
          Rx:   rotation in X axis
          Ry:   rotation in Y axis
          Rz:   rotation in Z axis
          The order of rotation is Rz -> Ry -> Rx

     [Rotate]   rotate relative to current viewport
          Ru:   rotation along u axis
          Rv:   rotation along v axis
          Rw:   rotation along w axis
          The order of rotation is Rw -> Rv -> Ru

   [Transform]  transform current viewport with the following ROT-DEFI
      Rotdefi:  roto-translation (normal or inverse)
                Selecting a LATTICE region the Rotdefi is
                automatically selected

   [Bookmarks]  save/recall geometry views
         Plot:  all saved views are stored as Geometry plots in flair
          {img:add.gif}:   add a new bookmark
          {img:del.gif}:   delete currently selected one
          {img:save.gif}:  save the present location to the selected
                 bookmark
          {img:ok.gif}:   apply the bookmark

       Note: the first field x, Du, ux, vx, Rx, Ru accepts either
       * Numerical value
       * Vector with 2 or 3 values to substitute on the other fields
         e.g Entering on "X:" the value  "10.0 50.0 -100.0"
             Will set on X:10.0,  on Y:50.0 and on Z:-100.0
         It can be practical when you want to copy paste the values

   F4.7} Debugging

     The message "Errors in Geometry" notifies that are possible errors
     in the geometry. The problematic bodies and regions are
     highlighted with red lines.

            {img:grab-geometry-error1.gif}

     Selecting the {img:debug.gif}Errors tab on the left side,
     displays the geometry errors.

     Info: Touching surfaces are checked against 10 significant digits

 {img:grab-geometry-error2.gif}

     The listbox of the dialog lists all geometrical errors that are
     found. Duplicates are removed. flair-geoviewer is scanning all
     visible bodies to identify the errors, therefore all the points
     are located "on the boundaries" of the body, however the error is
     either on the positive (inside) or the negative (outside) side of
     the body.

        x,y,z   Coordinates of the error (on the surface of body)
        body    Body with the x,y,z point on surface generating the error
        +body   Regions that are on the + side of the body.
                Regions where the body should be subtracted to remove the error
        -body   Regions that are on the - side of the body.
                Regions that the body should be intersected to remove the error
        +/- of body are defined according to the normal on the surface.
        + refers to outside, - to inside

     The text box in the errors dialog shows errors and warning found
     during the interpretation of the FLUKA input file. Warnings can
     be disabled with the "Ignore Warnings" option in the Preferences
     (Configuration) dialog of flair.

   F4.8} Selection

     Objects, Bodies, Regions and/or Zones can be selected either:

     - From the Object and/or Properties list boxes.
       Holding [Ctrl] toggles the selection, and holding [Shift]
       selects a range of items

     - Graphically using the action [s] {img:select.gif} with the
       Left-Mouse button
       * [Ctrl] + left-mouse-button toggles the selection (select/unselect);
       * Area selection: Click on the background and drag the mouse to draw a
         rectangle area. Everything inside the area will be selected.
         Also holding [Ctrl] pressed will toggle the selection.

     Notes:
     - The Selected items (from the filtered ones) are visible when the
       {img:select.gif} checkbutton on the object listbox is pressed

     - OBJECTS:
        * highlighted in magenta
        * can be graphically modified

     - BODIES: The selected bodies are:
        * outlined in magenta
        * yellow dots appear on their vertices and intersection with
          other bodies. They can be used as snapping points
        * the action handlers appear on the last selected body,
          permitting to move/rotate/resize the body (see F4.10)
        * highlighted also into the object list in the left bar
        * Their common properties & attributes will be displayed on the list boxes.

     - REGIONS:
        * The selected regions are shaded with a darker or lighter color;
        * Clicking on a point of overlap of two or more zones ALL
          overlapping zones will be selected

     - ZONES:
        * The select zones are shaded with a hash pattern;
        * To select a zone first you have to select ONE REGION;
        * Then click on point that belongs to the zone;
        * Or select the zone from the Properties Listbox;

     - [ESCape] cancels the selection


     Selection Freezing
     ******************

     When repeated operations have to be performed with involving some
     bodies or regions, the user can LOCK the selection of this
     bodies/regions with:
        - Menu -> Tools -> Selection -> Freeze
        - Go to the Attributes and click on Lock [X] check box
        - or Right-click -> Selection -> Freeze
        - or Shortcut [l]
        - or Icon {img:lock.gif} on the ribbon

     WARNING: is very important to remember to UNLOCK at the end of
     the operation


   F4.9} Objects

     There are a few auxiliary objects in flair for helping on the drawing.
     The objects are stored in the input file as special flair cards with the
     following tag names preceded with the exclamation mark in order
     to be ignored by FLUKA as inline comments
                !point, !arrow, !ruler, !light

     Point (Shortcut p):
      - can be drawn with variable types (dot, square, circle, cross etc..)
      - Point can be used as markers or as snapping points for
        inserting new bodies
      - can be used to provide help text for the user
      - automatically generated after image calibration (F4.13)

     Arrow or line:
      - draw a simple line, with arrow in the head or tail or both
      - can be used as snapping points (both ends of the arrow)
      - provide basic drawing/pointing means to the user

     Ruler:
      - draw simple ruler or a combined one with angles
      - is used to measure distances and angles
      - or project snapping points to a different location, by
        providing the length and the direction
      - all ends of a ruler can used as snapping points

     Light:
      - Add user defined lights for illuminating the 3D views
      - 3 different types, sun (or directional), omni and spot

   F4.10} Bodies

     F4.10.1   Adding New bodies
     F4.10.2   Body Visibility
     F4.10.3   Body Editing


     F4.10.1} Adding New bodies
     **************************

       Shortcuts:
        - Menu -> Insert -> Bodies
        - Icon {img:add.gif}
        - Right-mouse-click to open popup menu
        - [Ctrl]+Right-mouse-click to open the insert dialog
        - [Spacebar] or [Ins] or [Ctrl-Enter] to open the insert dialog
        - [b] to open directly the bodies insert dialog
        - [B] to repeat the last body added

       Mouse actions:
        1. Select the type of body you want to insert
        2. Move to the appropriate viewport, body will be
           perpendicular to the selected viewport
        3. Left-mouse-click on the wished location of the new body
        4. either release the left-button and drag the cursor
           or keep the left-button pressed drag to the location of
           the first extend of the body
           NOTE: - Releasing is lets you create more precise objects
                 - You can type-in the coordinate the coordinate during the
                   action e.g.  while adding a SPH type 40 and it
                   will set the radius to 40
        5. click and continue with the next one...

       Mouse Steps:
        XYP, XZP, YZP: Viewport should not be parallel to body
             * Location

        PLA: perpendicular to viewport
             * Location
             * 2nd point belonging on the plane

        RPP: symmetric around the w-axis
             * Location
             * Outer corner on the viewing plane

        BOX: XY plane // viewport, Z vector = -w
             * Location
             * X-vector end
             * Move outer plane

        WED: as in BOX
             * Location
             * X-vector
             * Y-vector (forced perpendicular to X)

        RCC: Height will be lying on viewport
             * Location
             * Height
             * Radius

        REC: Height will be lying on viewport
             * Location
             * Height
             * Radius-X
             * Optionally: Radius-Y if viewport permits it

        XCC, YCC, ZCC
             * Location
             * Radius

        XEC, YEC, ZEC: be careful on the chosen viewport
             * Location
             * Radius-X
             * Optionally: Radius-Y if viewport permits it

        TRC: Height will be lying on viewport
             * Location
             * Height
             * Apex radius
             * Base Radius

        ARB: not possible for the moment

        QUA: will generate a sphere at desired location
             Location

       Notes:
        - The default dimension/radius of all new bodies is one grid unit
        - Renaming a body will automatically rename any reference to it
          without asking the user
        - All new bodies will use the same name prefix from the
          last body renamed
        - Shortcut: [n]ame allows to fast edit the name of the object
          without the need to move the mouse to the properties listbox



     F4.10.2} Body Visibility
     ************************

       The default behaviour is that body SEGMENTS ARE ONLY VISIBLE
       when they represent borders of REGIONs. In order to make them
       visible (to be able to visually select them):
        - Select the body (from the list box, or from its visible segment)
        - Menu -> Select -> Visibility -> Set
        - Go to the Attributes and click on Visible [X] check box
        - or Right-click -> Visibility -> Set
        - or Shortcut [v]
        - or Icon {img:toggle.gif} on the ribbon


       Experimentally you can display the 3D wireframe of a body in
       order to see it even if it doesn't intersect the current
       viewport.
        - Go to the Attributes and click on Wireframe [X] check box
        - Menu -> Select -> Wireframe -> Set
        - or Right-click -> Wireframe -> Set
        - or Shortcut [#]
        - or Icon {img:wireframe.gif} on the ribbon



     F4.10.3} Body Editing
     *********************

       Bodies can be edited either

       - Text: directly in the properties listbox, typing the correct
               coordinates or in flair input editor

       - Graphically:
         * Select the body and the action handler(s) will be displayed
         * Click on the action handler (cursor) and start moving the object
         * Control + click on the action handler duplicates the body
         * Click for a second time and drag with the mouse the
           appropriate handler or body surface:
           - on the small circle to freely move (Shortcut: [g]rab)
           - on the large circle to rotate around w (Shortcut: [r]otate)
           - on the red/green/blue line representing the x/y/z axis
             to move but locked on the corresponding axis.
           - While moving with [g]rab or locked you can always turn
             on/off the axis locking by clicking on [x], [y] or [z]
           - on any surface to freely resize the body dimensions
             radius, etc..
           - on any small square handler (to be visible it has to lie
             on the viewing plane)
         * Shift-MouseWheel resizes the action handler

                          {img:body-handlers1.gif}

          Example a truncated cone TRC will look like below
                     {img:body-handlers2.gif}

          Click and drag:
          1. On the base plane, to move it perpendicular to height vector
          2. On the small square handler on the apex plane, to freely move
             the height, axis or normal of body
             This handler appears only if it lies on the viewing plane
          3. On the apex plane, to move it perpendicular to the height
             vector
          4. On the conic surface close to the apex to resize the appex
             radius
          5. On the conic surface close to the base to resize the base
             radius

          Shortcuts:
            [Shift]        pressing [Shift] while dragging cancels the
                           alignment. (Free move)
            [Ctrl]         holding [Ctrl] while dragging makes more
                           relaxed by a factor of 5 the snapping


   F4.11} Regions

     Region editing is one of the most important action in flair
     geometry editor.

     F4.11.1    Adding New Region
     F4.11.2    Region editing


     F4.11.1} Adding New Region
     **************************
       Shortcuts:
        - Menu -> Insert -> REGION
        - Icon {img:add.gif}
        - Right-mouse-click to open popup menu
        - [Ctrl]+Right-mouse-click to open the insert dialog
        - [Spacebar] or [Ins] or [Ctrl-Enter] to open the insert dialog
        - [R] to open directly the bodies insert dialog

     Notes:
       * Immediately the properties listbox will be activated to
         edit the name.
       * Renaming a region will automatically rename any reference
         to it without asking the user.
       * REGIONs and Zones are displayed according to their position
         in the input. If you want to visually see the result during
         the editing is better to start from inside to outside, and
         leave the space surrounding the working region as undefined.
       * When changing the material or transformation of a region flair
         will automatically add the appropriate ASSIGNMAT and/or
         LATTICE cards.
       * Deleting a REGION will not delete the associated
         ASSIGNMAT and/or LATTICE cards



     F4.11.2} Region editing
     **************************
     The most import action of editing a region is to define its
     mathematical expression. flair in the geometry editor will split
     the region expression into a list of zones.
     If parenthesis are used they will be treated as one zone.
     The user can manipulate the zones either with the keyboard or
     graphically

     e.g.  +a +b | +c | +e -(+f -g | +h)

           will be split into 3 zones
           zone01: +a +b
           zone02: +c
           zone03: +e -(+f -g | +h)



      Keyboard
      ********
       - To add a new zone enter the appropriate expression in the
         "+zone" field
       - To modify an existing zone, click with the mouse the
         appropriate zone##
       - To delete a zone select with the mouse or keyboard the zone##
         rows and either hit the [Del]ete key inside the listbox or
         with the mouse Right-Click -> Delete


      Graphically
      ***********
      The recipe is the following:
      - Select the desired REGION. If a new region is to be created
        do not select anything
      - During the following process maintain the REGION selected.
        In case of accidental unselection of the REGION, press [Ctrl]
        and reselect the REGION

      - Add a new zone:
         * Verify that there is no zone selected in the property listbox.
         * If there is any hit [Esc]ape to unselect them
         * Add onto the selection ONLY the bodies representing the borders
           of the zone
           (Holding [Ctrl], select by clicking on the desired bodies)
         * Right-click or [Space]->Zone {img:zone.gif} or with the
           shortcut [d]efine.
           Note: [D]efine (capital D) will first unselect any zone)
         * Move the mouse and click in any of the viewports, a point that
           belong to the wished zone
         * Automatically the zone expression will be created

      - Modify/Edit an existing zone:
         * IMPORTANT: Select the zone## either on the property listbox
           or graphically in any viewport clicking a point that belongs to it.
         * Automatically ALL bodies involved in the zone expression
           will be selected
         * With the zone selected, select or unselect additional bodies
           if needed
         * Then like in the "Add a new zone" click on "Zone" or with
           shortcut [d]efine (small)
         * Move the mouse and click in any of the viewports, a point that
           belong to the wished zone
         * Automatically the zone expression will be replaced

       Note:
        - DO NOT select bodies that you don't need
        - There is an automatic optimization of unwanted bodies but is
          far from perfect.
        - Verify if you don't have accidentally locked some bodies.


      Step by step example
      ********************
      In this example we will create a sphere with a cylindrical hole cut
      with a tilted plane.

      {img:zone_edit1.gif}           {img:zone_edit2.gif}

      * First we have to create all necessary bodies
         - sphere
         - infinite cylinder
         - tilted plane

      * Select the sphere body
        The sphere outline will be highlighted.
                   {img:zone_edit3.gif}
        Each selected body divides the space into 2 zones
             1: +sphere     inside the sphere
             2: -sphere     outside the sphere

      * Add to the selection the infinite cylinder
        with [Ctrl] + Left mouse click
                   {img:zone_edit4.gif}
        The 2 selected bodies divides the space into 4 zones
             1: +sphere +cylinder
             2: +sphere -cylinder
             3: -sphere +cylinder
             4: -sphere -cylinder

      * Add to the selection with [Ctrl]+left-click on the tilted plane.
                   {img:zone_edit5.gif}
        Now the space is divided into 8 zones
             1: +sphere +cylinder +plane
             2: +sphere +cylinder -plane
             3: +sphere -cylinder +plane
             4: +sphere -cylinder -plane
             5: -sphere +cylinder +plane
             6: -sphere +cylinder -plane
             7: -sphere -cylinder +plane
             8: -sphere -cylinder -plane

        Tip: The number of valid zones <= 2^bodies

      * Press [Spacebar] and select the action Zone {img:zone.gif}
        or with the shortcut [d]efine.
        - Moving the mouse, flair shows the various subdivisions of
          space with their optimized expression.
        - Point and click with the mouse somewhere inside zone 4
        - A new REGION will be created
        - Automatically the zone expression

                 zone01:  +sphere -cylinder -plane

          will be added to the REGION as a new zone
        - all bodies will be automatically unselected
        - the new REGION will remain selected.
                   {img:zone_edit6.gif}

      * Press [F2] or use the mouse to change the name of the region
      * Press [m] or use the mouse to change the material of the region

      * Finally we have to add as second zone the lower half of
        the sphere. Select again the sphere and the plane (pressing [Ctrl])
        (NOT the infinite cylinder this time)
                   {img:zone_edit7.gif}
        Again the space is divided into 4 zones
             1: +sphere +plane
             2: +sphere -plane
             3: -sphere +plane
             4: -sphere -plane

      * Press [Spacebar] and select the action Zone {img:zone.gif}
        or with the shortcut [d]efine.
        - Point and click with the mouse somewhere inside zone 1
        - Automatically the zone expression

                 zone02:   +sphere +plane

          will be added to the REGION as a new zone.
                   {img:zone_edit8.gif}


   F4.12} ESCape and DELete

    [Esc]ape: to stop/unselect
    [Del]ete or [Baskspace]: to delete objecst

    Both [Del]ete/[BackSpace] perform their action in the following order
    one item at each time the key is pressed:

    [Esc]ape:
        1. Stop the current action e.g. during selection, rotation or panning...
        2. If a zone is selected unselected the zone
        3. Unselect any selected bodies
        4. Unselect any selected region

    [Del]ete:
        1. If any zone is selected, delete ONLY the zone
        2. Delete any selected bodies
        3. Delete any selected region


   F4.13} Layers

     The Layers tab allows the user to create customized views. The
     user has the possibility to change the fill color of the regions
     displaying regions, materials or even color encoding of biasing,
     cuts, thresholds etc. Moreover The user has the possibility to
     overlay a background image e.g a technical drawing, project
     USRBIN data, BEAM parameters, lattices, voxels, transformations
     as well 3D representations using a raytracing technique. Or a
     combination of any of the above.

          {img:grab-geometry-layers1.gif}

     The buttons on the top allow the user to create, rename, clone or
     delete a layer.
     WARNING: There are 4 predefined system layers:
           Boundary
           Media
           3D
           Lattice
     where the user can only control the "Options".

     The "Global" checkbox when ticked makes the layer common to all
     projects. It saves the information in the flair.ini file rather
     in the flair project

     The listbox on the top allows:
       - to access and modify the various options for each layer type
       - to turn ON/OFF the visibility of the layer type
       - Click on <add> or with the keyboard [Ins] to add a new layer
       - Right-Click to remove the layer or with the keyboard [Del]

     The following layer types are available:

     WARNING: Do not forget to click [Apply] to perform the chanes


     *******************
     * Options         *
     *******************

     allows the user to modify the global options for ALL viewports and layers

          {img:grab-geometry-layers2.gif}

     Title:             Display the viewport title on the top-right corner
     Coordinate System: Display the coordinate system on the bottom-left
     Viewport lines:    Display other viewports as dashed lines
     Show Errors:       Enable the error lines drawing. (As well the
                        error message)
     Grid:              Display the grid
     Grid Level:        Opacity of the grid
     Lattice Level:     Opacity of the hashed lines when lattices are displayed
     Crosshair:         Display a cross hair in the center of the screen
     Text Background:   Opacity of the background color for all text
                        on screen
     Shortcut:          Select a shortcut for faster accessing of the layer
     General Font:      Font to use for all text
     Grid Font:         Font to use for displaying grid values
     Palette Font:      Font to use for displaying palette values



     *******************
     * Show            *
     *******************

     Color & text information to be displayed on the 2D plot

          {img:grab-geometry-layers3.gif}

     Vertices:  Display the intersection vertices of body boundaries
     Labels:    Choose type of labels to display, None, Region,
                Material or color Value
     Color:     Color to fill the regions. It can be any
                random for the Region, predefined for the
                Material and from a color palette (see
                colorband) for any numerical value
                        Region          random color
                        Material        predefined material color
                        Material-Decay  material for decay transport
                        Density         material density
                        USRBIN          USRBIN by region
                        Importance      BIASING what(3) for all-particles
                        Importance-H    BIASING what(3) for hadrons
                        Importance-E    BIASING what(3) for emf particles
                        Importance-N    BIASING what(3) for neutrons
                        Splitting       BIASING what(2) for all-particles
                        Splitting-H     BIASING what(2) for hadrons
                        Splitting-E     BIASING what(2) for emf particles
                        Splitting-N     BIASING what(2) for neutrons
                        Corrfactor       CORRFACT what(2)
                        Corrfactor-dE/dx CORRFACT what(1)
                        Corrfactor-rho   CORRFACT what(2) * MATERIAL.density
                        Deltaray        DELTARAY
                        e-Production    EMFCUT e production
                        e-Transport     EMFCUT e transport
                        g-Production    EMFCUT g production
                        g-Transport     EMFCUT g transport

     Lattices:  Display lattices
     Voxel:     Display voxels
     Palette:   Select palette to display color information like
                importances etc.



     *******************
     * Image           *
     *******************

     Display a background image e.g. a technical drawing of your object
     properly aligned with the geometry

          {img:grab-geometry-layers4.gif}

     Image:        Click to select the image to display
                   accepted formats png, gif, jpg, tif, bmp
     Calibrate:    Click to open the calibration dialog
     Alpha:        Select transparency/opacity level of the image
                   plot on the back the standard material colors
     Color Adjust: Interpolate the colors with the black-white range
     Black:        color to use for the #000000 value
     White:        color to use for the #ffffff value
     Prompt draw:  Normally the image drawing is done when the display
                   is idle. Prompt will force to draw the image
                   immediately however rendering the display a bit
                   slow

{img:grab-geometry-layers3b.gif}

     The calibration dialog needs at least 3 markers (the more the
     better) to find the transformation from the image coordinates to
     the geometry coordinates.
     Note: The markers should not fall all in the same line, otherwise
     the program cannot calculate the transformation matrix

     Add              add a new marker any point in the image and enter the
     Ctrl-Click       the geometry (x,y,z) corresponding to this point
     Right-Click      on any point to insert a new marker, delete or
                      edit the coordinates of the marker
     Zoom In          or MouseWheel
     Zoom Out
     Info             To dump to the output window the calibration error
     Ok               To close the window and accept the calibration
     Cancel           To close and forget the calibration

     Once the image is properly calibrated then it will appear as a
     background image in the viewport when the appropriate layer is
     selected.

     Note: Please try to change the colors of your image in order to
     make it easier visible on the screen

           {img:grab-geometry-layers3c.gif}
                   Final image on the viewport window


     *******************
     * Beam            *
     *******************

     - not implemented for the moment -




     *******************
     * Userdump        *
     *******************

     Reads the default USERDUMP file and draws the particle
     trajectories.

          {img:grab-geometry-layers5.gif}

     Userdump file:   file to read
     Start:           Starting event
     # Events:        Number of events to plot



     *******************
     * Usrbin          *
     *******************

     Display cuts of one or multiple USRBINs dynamically in the
     geometry. Up to 10 usrbin can be loaded and displayed at the same
     time. The layer index selects the parameters of the specific usrbin.
     For each displayed pixel, the first USRBIN that includes the
     displayed location is drawn. Therefore select the finer mesh
     first and the coarser as last.

          {img:grab-geometry-layers6.gif}

     USRBIN from Inp Check if you want to display a USRBIN card
                     as a checker grid pattern.

     Usrbin file:    Load USRBIN file

     Detector:       Select detector to display from USRBIN file

     Norm:           Normalization constant to use

     X-offset:       Additional offset to apply to USRBIN
     Y-offset:       To get the offsets from Input select the
     Z-offset        "USRBIN from Inp" select the USRBIN
                     and then switch to file.

     Rotdefi:        Select a ROT-DEFI to be applied to the USRBIN

     Transparency:   Select transparency/opacity level of the usrbin
                     plot on top the standard material colors

     Palette:        Palette to use for this userbin

     Note: The color scale is not automatically selected you have to
     define it using the Palette layer

          {img:grab-geometry-layers4b.gif}



     *******************
     * 3D              *
     *******************

     Display 3D raytraced images behind the viewport. The usual cut
     will be visible and all transparent object will be filled with
     the ray-traced image behind.

          {img:grab-geometry-layers7.gif}

     Perspective:     Select orthographic (default) or perspective
                      projection
     FOV:             Field of View in degrees from 0 to 180.
                      It is enabled only in the perspective/combo mode.
     Ambient Light:   Amount of ambient light for dark regions
     Antialias:       Perform super sampling to enhance image
                      WARNING: Can slow down considerably the
                      rendering
     Shadows          Enable if you want lights to cast shadows
                      WARNING: Will slow down the rendering
     Edge detection:  Draw edges of regions as black lines.
                      WARNING: Will slow down the rendering
     Show errors:     Check if you want to display errors as
                      red error lines.
                      Note: if the [Show] layer is activated
                      also errors on the displayed projection
                      are also shown from that layer
     Xray level:      Set automatic transparency for each region
                      it finds emulating an xray image
     Clipped by:      Set a clipping body to clip the 3D image
     Negative clip:   Use the negative of the body
     Project body:    Use this body as a projection surface for
                      the USRBIN values. Useful if you want to
                      display fluences in vacuum or in transparent
                      objects.
     Usrbin as texture: Use the USRBIN values as the surface
                      color texture on regions. If unselected
                      USRBINS will be displayed only on the
                      Projection body

          {img:grab-geometry-layers5b.gif}


     *******************
     * Palette         *
     *******************

     Select the color band limits, gradient and palette. To be used
     in combination when showing numerical values, density, biasing,
     thresholds etc or USRBIN data. Up to 3 different palettes can
     be used. For example a gray-scale one for plotting densities and
     a color one for overlaying USRBIN values.

          {img:grab-geometry-layers8.gif}

     Palette:          Select the palette type to use
     Log:              Logarithmic or linear scale
     Invert:           Reverse palette order
     Transparent(<Min):If selected do not paint anything for values
                       smaller than the palette minimum
                       If not selected all values<Min will be painted
                       with the minimum color
     Transparent(>Max):If selected do not paint anything for values
                       greater than the palette maximum.
                       If not selected all values>Max will be painted
                       with the maximum color
     Minimum:          Minimum value of the color band
     Maximum:          Maximum value of the color band
     Colors:           Number of colors to be interpolated
     CPD:              Colors per decade. Active when the "Log" option
                       is selected. When modified the Maximum value
                       is calculated as a function from the minimum
                       and the number of colors, to ensure correct
                       rounding of colors per decade.

          {img:grab-geometry-layers6b.gif}
          A combination of the 3D, USRBIN and Colorband


  F4.14} Transform bodies

   This dialog provide means for geometrical transformation of the
   selected bodies from the active Input Frame.

           {img:grab-transform_bodies.gif}

   "ROT_DEFini"         Combo box to either:
   "Add to Input"       1) add in the input the transformation as a
                           ROT-DEFini card
   "Get from Input"     2) get from the Input file the transformation
                           based on an existing ROT-DEFini card
   "Zero"               values smaller than this value are considered
                        as zero
   "Accuracy"           maximum number of digits to use
   "Use QUA..."         Convert infinite cylinders and elliptical
                        cylinders to infinite QUA or very long RCC/REC
   "Infinite"           height to use when [XYZ]CC or [XYZ]EC are
                        converted to RCC or REC

   Transformation types and arguments

   Type  Arguments Description
   ----  --------- --------------------------------
    O    x y z     Define origin of all transformations. It has to
                   be the first operation and only ONE is accepted
                   It is equivalent to
                      T -x -y -z        Moving back to origin
                      ...               Perform the transformations
                      ..
                      T x y z           Move back to initial position
    T    x y z     Translate by [x,y,z]
    TX   x         Translate by [x,0,0]
    TY   y         Translate by [0,y,0]
    TZ   z         Translate by [0,0,z]
    RX   x         Rotate around X axis by x degrees
    RY   y         Rotate around Y axis by y degrees
    RZ   z         Rotate around Z axis by z degrees
    MX   -         Mirror X values
    MY   -         Mirror Y values
    MZ   -         Mirror Z values
    S    s         Scale dimensions by s (use with care)
    ignore         Ignore this entry



1******************************************************************************
 F5} Plots

  The Plot page allows the user to create/clone or edit the list of
  plots that belong to this project. The page contains an editable
  listbox on the left that permits the user to modify the file name
  that will used to identify the plot the title of the plot and the
  type of the plot. Flair is using the timestamp of the generated
  files (under the selected filename) to find the status of the plot.
  Therefore it is highly recommended to use unique file names,
  otherwise you could have unpredictable results plotted.

  Gnuplot (http://www.gnuplot.info) is used as the default plotting
  engine. Gnuplot is a portable command-line driven interactive data
  and function plotting utility for UNIX, IBM OS/2, MS Windows, DOS,
  Macintosh, VMS, Atari and many other platforms. The software is
  copyrighted but freely distributed. flair permits the full usage of
  the power of gnuplot, but for this some knowledge of gnuplot
  commands is recommended.

  During plotting the "Output" window will display all commands that
  are issued in gnuplot. In case of doubt of the plot result, please
  check the Output window.

  All plotting frames share the same header and footer, for entering
  general information about the plot

{img:grab-plot-page.gif}

  Ribbon
  ~~~~~~
    Plot List
    ---------
       Add           Add a new plot
                     Shortcut: Ins

       Oz            Wizard creating automatically plots from the input

       Delete        Delete selected plots from the list
                     Shortcut: Del

       Clone         Clone selected plots
                     Shortcut: Ctrl-D

       Rename        Edit the name of the plot

       Move Up       Move one line up the selected plots
                     Shortcut: Ctrl-Up

       Move Down     Move one line down the selected plots
                     Shortcut: Ctrl-Down


    Action
    ------
       Save          Save plot to a file

       Print         Print plot

       Notes         Save plot to a file and import it into the
                     project notes

       Clean         Delete all generated files for the plot creation

       Plot          Press this button to generate the plot. flair will
                     try to generate all the necessary files ONLY when
                     needed (e.g running FLUKA to produce the geometry,
                     running gplevbin to process the USRBIN files
                     etc..) and if everything is successful it will
                     display the plot.

                     flair keeps some time information of the
                     generation of each file and the associated
                     parameters. If flair finds out that the output
                     file exists and no parameter has changed, then it
                     will skip the processing of the file and create
                     directly the plot.

                     Shortcut: Ctrl-Enter



  Plot Types
  ~~~~~~~~~~
  For the moment the following plot types are supported

      Geometry      Geometry plot, with possibility to visualize regions,
                    materials, lattices, biasing and magnetic field maps

      Usrbin        Perform 1D and 2D USRBIN plots

      Usr-1d        Plot output the of USRBDX, USRCOLL, USRTRACK, USRYIELD

      Usr-2d        Plot the double differential quantity from USRBDX

      Resnucle      Plot output of RESNULEi card as 1D or 2D
                    distributions

      Userdump      For processing and plotting the output of the
                    standard MGDRAW routine, activated with a USERDUMP
                    card. Useful for plotting the distribution of the
                    SOURCE particles.



  Common plot options

  Header
  ------
      Title         Plot title [click to show advanced options]

      Display       Select plotting display. 0=default. For multiple
                    plots select different display numbers

  Header-Options
  --------------
      font          title font

      height        title font height

      color         title font color

      options       additional gnuplot commands when setting the title

      grid          grid display on/off

      aspect        aspect ratio (1 for square)

      lines         types of lines gnuplot to use for plotting solid
                    or dashed

   Axes
   ----
      Label         Select (add or remove) possible axes
                       x,y  cannot be removed
                       z    for 3D graphics
                       cb   color band for 2D color plots
                       x2   top side axes
                       y2   right side axes
                    Click axes name to show advanced options

      Log           use logarithmic scale on/off

      Min           optional minimum value for the axis

      Max           optional maximum value for the axis


   Axes-Opt
   --------
      font          axes font

      height        axes font height

      color         axes font color

      options       additional gnuplot commands when setting the axes


    Fields and Buttons on Footer
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Commands
                    In this text box the user and enter gnuplot
                    commands to modify partially or completely the
                    behavior of the plot. Special commands are the
                      "plot"    when this line appears (without the "")
                      "splot"   flair will issue its standard plot
                                command. Use this command if you want
                                to have gnuplot commands before or
                                after the "plot" command issued by
                                flair

                       "replot" allow the user to add additional
                                plotting commands to the standard
                                flair one

                    With the gnuplot commands the user has full
                    control of all commands. For example issuing a
                    "reset" command gnuplot will ignore all the
                    settings from flair and the user has to manually
                    enter his plot.

                    You can add labels, arrows, text, modify the
                    palette, axes, position or size of the plot with
                    the use of the "Gnuplot commands" window


     Notes:
     ~~~~~~
     - Multiple plots can be edited, plotted, saved, printed at once.
       * Select the multiple plots from the listbox.
       * To edit a specific field <Right-Click> on the field to enable
         it and change the value. All fields that are enabled will
         update their value to the selected plots


1******************************************************************************
  {Geometry} plot

  With the Geometry Plot you can create 2D projections of the
  geometry, overlaying as color plot regions, materials, lattices,
  biasing and magnetic field maps. The header and the footer are
  common like in all other plots except the range that is dynamically
  calculated depending on the projection.

{img:grab-geometry-plot.gif}

  Each projection is defined by the position of the Center point, the
  projection axes called "Basis" and the extends of the plot.

  Flair using this information will generate a temporary FLUKA input
  file including only the relevant information (geometry, materials,
  fields, USR[IG]CALL cards. At the end it will append a PLOTGEOM card
  with the information supplied in this frame. It will execute FLUKA
  and if everything is Ok will process the PLOTGEOM output file and
  plot the result. In case of failure an dialog will be shown with all
  files produced by FLUKA for inspection.

    Fields and Buttons
    ~~~~~~~~~~~~~~~~~~
    Center          The center group allows the user to enter the 3D
    ~~~~~~          coordinates of the center position of the plot.

         x          The r=(x,y,z) center position coordinates
         y
         z


    Basis           The basis group defines the projection plane to be
    ~~~~~           used. The projection plane is defined by two
                    vectors the
                           u  for the x-projection
                           v  for the y-projection

         u          Define the u vector of the projection

         v          Define the v vector of the projection

         x-y        Set u=x-axes and v=y-axes

         x-z        Set u=x-axes and v=z-axes

         y-z        Set u=y-axes and v=z-axes

         swap       Swap the values of u and v

         -u         Negate the value of u

         -v         Negate the value of v


    Extends         The extends group defines half-range of the plot.
    ~~~~~~~         Total range is twice the value of Du and Dv

         Du         half range (or from center to max/min) in the u
                    axis

         Dv         half range (or from center to max/min) in the v
                    axis

         Get        Get the range and Center position from gnuplot.
                    You can zoom in gnuplot by right-clicking the
                    mouse and selecting a region of interest. Then
                    click the "Get" button to get the coordinates of
                    gnuplot back to this frame


     Plot           Provides two combo boxes for selecting the type of
    ~~~~~           plot as well the plotting axes

        Type        Gives the choice to the user of the type of the
                    plot, between
                        Geometry  purely 2D line plot
                        Region    Display regions with random color
                        Material  Display materials with colors
                                  defined in the "Palette"
                        Lattice   Display lattice with different
                                  colors
                        Field Intensity  Display Magnetic field
                                  intensity with color plot

                        Field Vector  Display Magnetic field vectors
                                  and intensity with color plot

        Run         Select the appropriate run from the drop down
                    listbox


    Grid            The grid group defines scanning grid to be used
    ~~~~            in FLUKA when plotting of region, materials,...
                    is requested.
                    Note: That the processing of the plot is done by
                    flair and since python is an interpreter language,
                    big values on the scanning grid could result in
                    slow performance

          Nu        Number of bins in the u axis

          Nv        Number of bins in the v axis



    Options         Various options
    ~~~~~~~
      Vector scale  Multiply the value of the magnetic field with the
                    Vector scale value when displayed on screen

      Coordinates   This field is automatically set when the basis
                    buttons are set. The user can further select on of
                    the following values to plot
                         U-V, V-U, X-Y, X-Z, Y-Z, Y-X, Z-X, Z-Y

      boundaries    Display all boundaries even between regions with
                    the same material

      labels        Display labels of regions, materials
                    Note: gnuplot 4.2 or higher is required for that




1******************************************************************************

  {Usr-1d} Plot

  With the Usr-1d Plot frame you can plot single differential
  quantities from USRBDX, USRTRACK, USRCOLL and USRYIELD. The frame
  accepts as input the _tab.lis files after processing in the Data
  frame. The frame allows the plot of many detectors from different
  files and modify

{img:grab-usr1d-plot.gif}

    Detectors
    ~~~~~~~~~
        listbox     Displays the list of detectors currently to be
                    included in this graph.
                    Actions:
                    -  Selecting one detector enables all fields in
                       the "Detector Info" group for editing
                    -  Selecting multiple detectors disables the
                       fields in the "Detector Info". However by
                       right-clicking on any of the fields the state
                       of the field is changed. If the fields are not
                       disabled then any change in their value will be
                       updated on all selected detectors
                    -  Double clicking the items permits to rename the
                       detector

          Toolbar
          ~~~~~~~
             {img:edit.gif}   Rename the detector
             {img:add.gif}   Add a new detector
                  Keyboard shortcut: Ins
             {img:del.gif}   Remove the selected detectors
                  Keyboard shortcut: Del
             {img:clone.gif}   Clone selected detectors
                  Keyboard shortcut: Ctrl-D
             {img:up.gif}   Move selected detectors one line up
             {img:down.gif}   Move selected detectors one line down


    Detector Info
    ~~~~~~~~~~~~~
         File        File name of detector. This frame accepts only
                     the _tab.lis files generated after processing in
                     the Data frame.

         Det         Detector name from the file to use. The index
                     is not sequential if in the _tab.lis files exist
                     also 2D tables.

                     If multiple distributions exist for one detector
                     Like 2D USRBDX distribution, the detector
                     is split into sub-detectors named
                     det-block

         graph       If enabled it will include this graph in the plot

         legend      Display the legend of this graph


         type        Plotting style to be used. Possible choices are:
                        errorbars      Plot only error bars
                        errorlines     Plot with lines and errors
                        histerror      Histogram superimposed on errorbars
                        histogram      Histogram plot (steps)
                        lines          Lines plot
                        linespoints    Lines and points plot
                        points         Scatter point plot
                        steps          Histogram plot using the low value
                        xyerrorbars    Plot bin width and Y error bar

         value       Y-value to plot:
                         Y      as it is
                         <X>*Y  for isolethargic plots
                         DX*Y   integral in the bin

         X Norm      normalization value or expression to be used for
                     the X axis. Select the units normalization
                     directly from the drop-down listbox

         Y Norm      normalization value or expression to be used for
                     this detector. Check the Usrbin plot
                     normalization for more explanation

         Color       Select color for the lines and points

         Point type  Select a symbol for the points

         Line width  Thickness of lines

         Point size  Dimensions of point symbols

  Note:
    To modify many detectors at the same time. Select the detectors
    and then by right-clicking with the mouse you can enable the
    fields you want to modify. All enabled fields (even those not
    modified) will be updated on the detectors. Therefore be careful
    that if by mistake you enable a field right-click again to
    disable it.

1******************************************************************************

  {Usr-2d} Plot

  With the Usr-2d Plot frame you can plot the double differential
  quantities from USRBDX. The frame accepts as input the _tab.lis
  files after processing in the Data frame. The frame allows the plot
  of many detectors from different files and modify

{img:grab-usr2d-plot.gif}

    Detector
    ~~~~~~~~
        File        Clicking the field or the button will open a
                    dialog to select the _tab.lis detector to use.
                    Once the detector is selected the "Det" combo box
                    will be filled with the available double
                    differential detectors

        Det         Select the desired detector to plot.

1******************************************************************************

  {Usrbin} Plot

  With the Usrbin Plot frame you can create 2D or 1D projections from the
  USRBIN scoring card, optionally overlay by the geometry

{img:grab-usrbin-plot.gif}

     Binning Detector  group
    ~~~~~~~~~~~~~~~~~~~~~~~~
         File       Clicking the field or the button will open a
                    dialog to select the usrbin detector to use.
                    Once the detector is selected the header of the
                    detector will fill the labels in this group

         Title      Displays the title stored in the usrbin detector

         Cycles     Shows the number of cycles contained in this
                    detector

         Primaries  Total number or primaries

         Weight     Total weight of primaries

         Time       Time and date of the detector. If the detector is
                    a summary file after processing, it will display
                    the string  **** Sum file *****


     Binning Info  group
    ~~~~~~~~~~~~~~~~~~~~
         Det        A combo box containing the list of all detectors
                    inside the usrbin file. When selecting one
                    detector the labels in this group will be filled.

         Type       Type of scoring, Cartesian, cylindrical, etc...

         Score      Scoring quantity

         X / R      X or R coordinate limits and number of bins

         Y / Phi    Y or Phi coordinate limits and number of bins
         Z          Z coordinate limits and number of bins

         Min        Minimum value of the projected region. This
                    display will be filled after plotting

         Max        Maximum value of the projected region. This
                    display will be filled after plotting

         Int        Integral of the projected region. This
                    display will be filled after plotting


     2D Histogram  tab
    ~~~~~~~~~~~~~~~~~~
 {img:grab-usrbin2d-plot.gif}
     Two dimensional cuts of usrbin data

     For the 2D plots the color band CB-axes has to be activated

     Projection & Limits  group
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
         X / Y / Z  Select projection axis and limits

         swap       swap vertical and horizontal display

         errors     display errors as color plot or 1d histogram.
                    WARNING errors will be underestimated, since it
                    treats all bin values as uncorrelated.

         Get        get limits from gnuplot

         Norm       Enter normalization value or expression for results
                    It accepts:
                      1. any constant or an expression that will result
                         in a constant
                      2. any expression of variable (x), where x in
                         this case is the value of the bin
                    Check the available functions in gnuplot

         log        Logarithmic or linear color band


     Geometry  group
    ~~~~~~~~~~~~~~~~
         Use        Geometry to overlap on top of the plot. Possible
                    choices are
                       -No-     Do not overlap geometry

                       -Auto-   Automatically calculate and generate
                                geometry at the middle of the
                                projection limits if "Pos" is not
                                specified. Otherwise at the "Pos"
                                position on the projecting axis

                       ...      List of the available geometry plots
                                in this project

         Pos         Projection location of the geometry if "-Auto-"
                     is used. Leave it blank for using the default
                     value, equal to the middle value of the
                     projection limits on the selected axis.

         Axes        Axes to use from the geometry.
                        Auto    will selected automatically the axis
                        *-*     manually selected the geometry axis


     1D Histogram tab, 1D Max, ...
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{img:grab-usrbin1d-plot.gif}

     One dimensional projection of usrbin data. Please see the Usr-1d
     plotting style information

1******************************************************************************

  {Userdump} Plot

  With the Userdump Plot you can create histogram of the source
  particles or scatter plots on top of the geometry

{img:grab-userdump-plot.gif}

    Collision File
    ~~~~~~~~~~~~~~
        File        Select the userdump file to use

        From Event  Starting event from which to plot

        # Events    Number of events to plot

        Emin        Filter plotted events by setting a minimum energy

        Emax        Filter plotted events by setting a maximum energy

        Listbox     Filter plotted events only for selected particles
                    All if none is selected


     Continuous
     ~~~~~~~~~~
     Plot continuous loses (not implemented)


     Point
     ~~~~~
     Plot point loses (not implemented)


     Source
     ~~~~~~
     Plot source particles distributions

       Type        Histogram or scatter plot

       X-Plot      Plot quantity for X axis

       Bins        Number of bins in case of histogram

       Weighted    Score particle weight

       Y-Plot      Only if scatter plot is selected


     Geometry
     ~~~~~~~~
       Use         Geometry plot to use to superimpose the source
                   scatter plot

       Axes        axes to use from geometry
                   (normally automatically selected)

1******************************************************************************

  {Resnucle} Plot

  With the Resnuclei Plot you can create 2D or 1D plots from the
  output of the RESNUCLE scoring card

{img:grab-resnuclei-plot.gif}

    Residuals Detector
    ~~~~~~~~~~~~~~~~~~
        File        Clicking the field or the button will open a
                    dialog to select the resnuclei detector to use.
                    Once the detector is selected the header of the
                    detector will fill the labels in this group

        Title       Displays the title stored in the usrbin detector

        Cycles      Shows the number of cycles contained in this
                    detector

        Primaries   Total number or primaries

        Weight      Total weight of primaries

        Time        Time and date of the detector. If the detector is
                    a summary file after processing, it will display
                    the string "**** Sum file *****"


    Detector Info
    ~~~~~~~~~~~~~
        Det        A combo box containing the list of all detectors
                    inside the resnuclei file. When selecting one
                    detector the labels in this group will be filled.

        Plot       Quantity to plot:
                      1d histograms are Z, A
                      2d histograms are Z/A, Z/N, A/Z, N/Z

        Type       Type of scoring

        Regions    Scoring region

        Volume     Normalization volume of the results

        Zhigh       Highest Z to score

        Ahigh       Highest A to score

        Mhigh       Highest M to score (WHAT(4) or RESNUCLEi card)

        Min         Minimum value. This display will be filled
                    after plotting

        Max         Maximum value. This display will be filled
                    after plotting


 F5.2} Gnuplot Reference

 The following is a quick reference of the most commonly used gnuplot
 commands. For a complete reference please consult the gnuplot manual.

         F5.2.1 Commands
         F5.2.2 Functions
         F5.2.3 Operators
         F5.2.4 Options
         F5.2.5 Text and Fonts
         F5.2.6 Terminals

 F5.2.1} Commands

   SAVING AND LOADING COMMANDS
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~

   call "{str:filename}" [ {val}, ... ]

        - Up to ten optional parameters can be specified to call.
          Their values are available inside the called script in the
          variables $0 through $9. Inside the script, the variable
          $# holds the number of parameters passed to call.

        - call must be the last command on a multi-command line.

   load "{str:filename}"
        - Load commands from file and execute them.
        - load must be the last command on a multi-command line.

   save "{str:filename}"
   save [ functions | variables | set | terminal ] "{str:filename}"

        - Save details of the current session to file.

        - functions | variables | set | terminal writes only
          user-defined functions /variables / sets / terminal to file.

        - Without any of the optional constraints, all user-defined
          functions and variables, the


   PLOTTING
   ~~~~~~~~

   plot [ {ranges} ]
           [ {function} | "{str:filename}" ]
              [ index {int:start}[:{int:end}][:{int:step}] ]
              [ every {int:step}[::{int:start}[::{int:end}]] ]
              [ using {columnspec} ]
           [ axes [ x1y1 | x1y2 | x2y1 | x2y2 ] ]
           [ title [ "{str:explanation}" | {int:col} ]
              | notitle ]
           [ smooth [ unique | frequency | bezier | sbezier
              | csplines | acsplines ] ]
           [ with {stylespec} ]
           [, ... ]

       - Ranges are given as pairs in brackets: [min:max]. Leaving an
         entry empty leaves the corresponding limit unchanged; supplying
         a * turns on autoscaling for that limit. Up to two ranges can
         be supplied: one to limit the x range, and one to constrain the
         y range. In parametric mode, up to three ranges can be
         supplied. The first measures the range of the parameter; the
         following two are as before. A function can be supplied,
         depending on a dummy variable called x in regular mode, or t in
         parametric mode. (The name can be changed using set dummy.) A
         text file containing data to plot can be specified.

       - Supplying an empty filename reuses the most recently named file
         in the same plot command. The special filename hyphen ( - )
         indicates that data should be read from the same device that
         the command was read from (usually standard input-the terminal
         in interactive mode). index selects which data set(s) in the
         input file should be plotted.

       - Data sets are separated from each other by double blank lines
         in the data file. Data sets are counted starting at zero.

       - "every" controls how lines in multiline records should be read.

       - "using" selects which columns should be used for x and y
         values, and possibly other values as well (style-dependent).

       - Column numbers start at 1. The pseudocolumn with column number
         0 contains the line number (starting at zero) in the current
         data set, resetting to zero when encountering a double blank
         line. The pseudocolumn with column number -2 contains the index
         of the current data set, which is incremented whenever a double
         blank line is found. If a column number is enclosed in
         parentheses, the expression within the parentheses is
         evaluated and the result is used as if it were the column
         value. Within such an expression, the value of each column can
         be accessed by prefixing the column number with a dollar sign
         ($). axes indicates which set of axes the current data file or
         function should be plotted against.

       - "title" takes a string that will be placed as explanation into
         the graph's key (legend). Supplying an empty string or the
         notitle keyword suppresses the key entry. If the set key
         autotitle columnhead option has been enabled, title takes an
         integer argument that will be interpreted as a column number.
         The first noncomment line in the column indicated will be used
         as explanation in the graph-s key. smooth applies a smoothing
         algorithm:

      - "unique" sorts points by x value and replaces multiple data
        points having the same x value with the average of the y values.
        - frequency sorts points by x value and replaces multiple data
          points having the same x value with the sum of the y values.

        - bezier   calculates the Bezier curve through all data points.

        - sbezier  applies the unique transformation and then calculates
                   the Bezier curve for the result.

        - csplines applies the unique transformation, then calculates a
                   natural cubic spline interpolation, passing exactly
                   through all data points.

        - acsplines applies the unique transformation, then calculates a
                    weighted cubic spline approximation. The weights
                    must be supplied through an additional column.

   replot
          Repeat the last plot or splot command.

   splot [ {ranges} ]
         [ {function} | "{str:filename}" ]
             [  index {int:start}[:{int:end}][:{int:step}] ]
             [  every {int:step}[::{int:start}[::{int:end}]] ]
             [  using {columnspec} ]
             [  title "{str:explanation}" | notitle ]
             [  with {stylespec} ]
             [, ... ]

      - The syntax is similar to the plot command, except where the
        additional dimension needs to be accommodated (additional range
        and column specs).


   OPTIONS
   ~~~~~~~

   set ...
          Set an option.

   show   ...
           plot
           [ variables [all] | functions ]
           [ all | version ] [ long ]

          Display information about the current session.
          - Can be used with any option to see the current value of that
            option.
          - show plot displays the most recent plot command.
          - "variables" and "functions" display only user-defined variables
            and functions.
          - "variables all" displays user-defined and gnuplot internal
            variables.

   reset
          Reset all options to their system defaults.

   unset ...
          Disables an individual option or resets it to its default state.


   SUBPROCESSES
   ~~~~~~~~~~~~

   shell
          Spawns an interactive shell.

   system "{str:shellcmd}"
          Executes a shell command and displays its output on the
          screen.


   TERMINAL HANDLING
   ~~~~~~~~~~~~~~~~~

   clear
          Clears the current output device.
          - Clears the current output device as set by set output.

   lower {int:winid}
          Lowers a plot window.

   raise {int:winid}
          Raises a plot window.

   test [palette]
          test generates a standard test image, demonstrating line styles and point types,


   CURVE FITTING
   ~~~~~~~~~~~~~

   fit [ {ranges} ]
       {function} "{str:datafile}"
            [ index {int:start}[:{int:end}][:{int:step}] ]
            [ every {int:step}[::{int:start}[::{int:end}]] ]
            [ using {columnspec} ]
            via [ {var1}, {var2}, ... | "{str:parameterfile}" ]

          Performs a numerical, nonlinear least-squares fit. Most of the
          syntax is similar to the syntax for the plot command and many
          of the data selection and transformation directives available
          for plot are also available for fit. Both the function to fit
          and a file with the data must be supplied. The function must
          depend on the dummy variable explicitly. The parameters named
          in the via clause are varied to obtain the best fit result.

   update "{str:filename}"
          Writes the current values of the best-fit parameters to the
          named file.


    MISCELLANEOUS
    ~~~~~~~~~~~~~

    bind
    bind!
    bind [allwindows] "{str:keys}" "{str:command}"
          Change or display hot key bindings.

    if ({condition}) {command}
           [; else if ( {condition} ) {command} ]
           [; else {command} ]
          Conditional execution of commands.

    pause {int:seconds} [ "{str:message}" ]
    pause mouse [ {eventmask} ] [ "{str:message}" ]
          Prints a message to the screen, then waits until a timer
          expires or a user event occurs.

    reread
          If used within a file containing gnuplot commands, forces
          gnuplot to read the file again from the

 F5.2.2} Functions

  Square root, exponential, logarithms

       Function        Description
       ~~~~~~~~        ~~~~~~~~~~~
       sqrt(x)         Square root function
       exp(x)          Exponential function
       log(x)          Natural logarithm (base e)
       log10(x)        Common logarithm (base 10)

  Trigonometric functions
       Function       Description
       ~~~~~~~~       ~~~~~~~~~~~
       sin(x)         Trigonometric functions
       cos(x)
       tan(x)
       asin(x)        Inverse trigonometric functions.
       acos(x)
       atan(x)
       atan2(y, x)    Evaluates to atan(y/x),

  Hyperbolic functions
       Function       Description
       ~~~~~~~~       ~~~~~~~~~~~
       sinh(x)        Hyperbolic functions
       cosh(x)
       tanh(x)
       asinh(x)       Inverse Hyperbolic functions
       acosh(x)
       atanh(x)

  Bessel functions
       Function       Description
       ~~~~~~~~       ~~~~~~~~~~~
       besj0(x)       Bessel function of the first kind of order 0
       besy0(x)       ... second kind of order 0
       besj1(x)       ... first kind of order 1
       besy1(x)       ... second kind of order 1

  Error integral and related functions
       Function       Description
       ~~~~~~~~       ~~~~~~~~~~~
       erf(x)         Error function
       erfc(x)        Complementary error function
                      erfc(x) = 1 - erf(x)
       inverf(x)      Inverse error function
       invnorm(x)     Inverse normal distribution function
       norm(x)        Normal (Gaussian) distribution function
                       norm(x) = 0.5*(1+erf(x/sqrt(2)))

  Gamma function and related functions
       Function       Description
       ~~~~~~~~       ~~~~~~~~~~~
       gamma(x)       Gamma function
       ibeta(p, q, x) Incomplete beta function
       igamma(a, x)   Incomplete gamma function
       lgamma(x)      Natural logarithm of gamma function:
                      lgamma(x) = log( gamma(x) )

  Miscellaneous mathematical functions
       Function       Description
       ~~~~~~~~       ~~~~~~~~~~~
       abs(x)         Absolute value for real or complex x.
       ceil(x)        Smallest integer not less than x
       floor(x)       Largest integer not greater than x
       int(x)         Integer part of x, truncated to zero.
       lambertw(x)    Lambert-W Function
                      (the inverse of f(w) = w exp(w)).
       rand(x)        Random number generator
       sgn(x)         Sign function (-1 if x<0; 0 if x=0; 1 if x>0).

  Functions for complex arguments
       Function       Description
       ~~~~~~~~       ~~~~~~~~~~~
       abs(x)         Absolute value of x: sqrt( real(x)**2 + imag(x)**2 )
       arg(x)         Phase angle of x: atan( imag(x)/real(x) )
       imag(x)        Imaginary part of x
       real(x)        Real part of x

  String functions
       Function             Description
       ~~~~~~~~             ~~~~~~~~~~~
       exists("x")          Returns 1 if a variable with that name is defined,
                            0 otherwise.
       strlen("s")          String length
       substr("s",i,j)      Substring equivalent to str[i:j]
       strstrt("str","key") Returns position of key in str

       words( "str" )       Number of words in str
       word("str",n )       Return nth word of str
       sprintf("format",...)
                            C formating of a string
       gprintf( "format", ... )
                            gnuplot formating of a string
       system("cmd")        Returns the output of the shell command.

  Column manipulation functions
       Function             Description
       ~~~~~~~~             ~~~~~~~~~~~
       column(x)            Returns the current value of that column
       stringcolumn(x)      Returns the current value of that column as
                            string
        valid(x)            Returns 1 is the current value of that
                           column is valid.

  Time column handling functions
       Function             Description
       ~~~~~~~~             ~~~~~~~~~~~
       timecolumn(x)        Parses the column with the format in
                            set timefmt
        tm_sec(x)           Return the seconds part of the time
        tm_min(x)           Minutes part
        tm_hour(x)          Hours
        tm_mday(x)          Month day
        tm_mon(x)           Month
        tm_year(x)          Year
        tm_wday(x)          Week day
        tm_yday(x)          Year day

 F5.2.3} Operators

      Unary operators
      In order of decreasing precedence.
         Operator   Example    Argument type    Description
         ~~~~~~~~   ~~~~~~~    ~~~~~~~~~~~~~    ~~~~~~~~~~~
            !         !a       int              logical NOT
            ~         ~a       int              one-s complement
            !          a!      int              factorial
            -         -a       any numerical    unary minus
            +         +a       any numerical    unary plus


      Binary operators
      In order of decreasing precedence.
         Operator   Example    Argument Type    Description
         ~~~~~~~~   ~~~~~~~    ~~~~~~~~~~~~~    ~~~~~~~~~~~
           **        a**b      any numerical    exponentiation
            *         a*b      any numerical    multiplication
            /         a/b      any numerical    division
            %         a%b      int              modulo
            +         a+b      any numerical    addition
            -         a-b      any numerical    subtraction
            <         a<b      any numerical    less than
           <=        a<=b      any numerical    less than or equal to
            >         a>b      any numerical    greater than
           >=        a>=b      any numerical    greater than or equal to
           ==        a==b      any numerical    numerical equality
           !=        a!=b      any numerical    numerical inequality
            &         a&b      int              bitwise AND
            ^         a^b      int              bitwise XOR
            |         a|b      int              bitwise OR
           &&        a&&b      int              logical AND
           ||        a||b      int              logical OR
            .         a.b      string           string concatenation
           eq         a eq b   string           string equality
           ne         a ne b   string           string inequality

       The logical operators && and || short-circuit, meaning that the
       second argument is only evaluated if the truth of the entire
       expression isn't determined after evaluating the first argument.

      Ternary operator
          a ? b : c
      evaluates its first argument (which must evaluate to an integer).
      If true (nonzero), the second argument is evaluated and returned;
      otherwise, the third argument is evaluated and returned.

 F5.2.4} Options

  CONFIGURATION
  ~~~~~~~~~~~~~

    set datafile commentschar ["{str:chars}"]
    set datafile separator [ "{str:char}" | whitespace ]
    set datafile missing ["{str:str}"]

    set decimalsign [ "{str:char}" | locale [ "{str:locale}" ] ]

    set encoding [ default | iso_8859_1 | iso_8859_2 | iso_8859_15
                 | koi8r | koi8u | cp437 | cp850 | cp852 | cp1250 ]

    set fit [ logfile "{str:filename}" ] [ [no]errorvariables ]

    set fontpath [ "{str:path}" ]

    set loadpath [ "{str:path}" ]

    set macros

    set mouse


  MATH
  ~~~~

    set angles [ radians | degrees ]

    set dummy {varname1} [, {varname2} ]

    set mapping [ cartesian | cylindrical | spherical ]

    set parametric

    set polar

    set samples {int:samples1} [, {int:samples2} ]

    set zero {flt:smallvalue}


  APPEARANCE
  ~~~~~~~~~~

    set border [ {int:mask} ] [ front | back ]
               [ [ linewidth | lw {int:width} ]
               [ linetype    | lt {idx:type} ]
               | [ linestyle | ls {idx:style} ] ]

    set clip points
    set clip [ one | two ]

    set logscale [ {enum:axes} ] [ {flt:base} ]

    set bmargin  [ {int:margin} ]    # bottom margin
    set lmargin  [ {int:margin} ]    # left margin
    set tmargin  [ {int:margin} ]    # top margin
    set rmargin  [ {int:margin} ]    # right margin

    set multiplot [ title "{str:title}" ]
                  [ layout {int:rows},{int:cols}
                  [ rowsfirst | columnsfirst ]
                  [ downwards | upwards ]
                  [ scale {flt:xfactor}[,{flt:yfactor}] ]
                  [ offset {flt:xoff}[,{flt:yoff}] ] ]

    set offsets [ {flt:left} [, {flt:right}
                [, {flt:top} [, {flt:bottom}]]]]

    set origin {flt:x}, {flt:y}

    set size [ [no]square | ratio {flt:r} | noratio ]
             [ {flt:x} [,{flt:y}] ]


  DECORATIONS
  ~~~~~~~~~~~

    set arrow [{idx:tag}] [ from {pos:from} ][ [to|rto] {pos:to} ]
              [ [ arrowstyle | as {idx:style} ]
              | [ [ nohead | head | backhead | heads ]
              | [ size {flt:length} [,{flt:angle}]
                [,{flt:backangle}] ]
                [ filled | empty | nofilled ]
                [ front | back ]
                [ [ linetype | lt {idx:type} ]
                [ linewidth | lw {int:width} ]
                | [ linestyle | ls {idx:style} ] ]
                ]
              ]

    set key [ on|off ] [ default ]
            [ [ at {pos:position} ]
              | [ inside | lmargin | rmargin | tmargin | bmargin ] ]
            [ left | right | center ] [ top | bottom | center ]
            [ vertical | horizontal ] [ Left | Right ]
            [ [no]reverse ] [ [no]invert ]
            [ [no]autotitle [columnheader] ] [ [no]enhanced ]
            [ samplen {flt:len} ] [ spacing {flt:factor} ]
            [ title "{str:text}" ]
            [ width {int:chars} ] [ height {int:chars} ]
            [ [no]box [ [ linetype | lt {idx:type} ]
            [ linewidth | lw {int:width} ]
            | [ linestyle | ls {idx:style} ] ] ]

    set label [{idx:tag}] [ "{str:text}" ] [ at {pos:location} ]
              [  left | center | right ]
              [  rotate [ by {int:degrees} ] | norotate ]
              [  font "{str:name}[,{int:size}]" ]
              [  [no]enhanced ] [ front | back ]
              [  textcolor | tc [ {clr:colorspec}
                           | lt {idx:type}
                           | ls {idx:style} ] ]
              [ point   lt | pt {idx:pointtype}
                           | ps {idx:pointsize} | nopoint ]
              [ offset {pos:off} ]

    set object [{idx:tag}] rectangle [ from {pos:from} [to|rto] {pos:to}
               | center|at {pos:ctr}
                 size {pos:extent} ]
               [ default ]
               [ front | back | behind ]
               [ fillcolor | fc {clr:color}  ]
               [ fillstyle | fs {idx:style}  ]
               [ linewidth | lw {flt:width}  ]

    set timestamp ["{str:format}"]
                   [ top | bottom ] [ [no]rotate ]
                   [ offset {pos:offset} ]
                   [ font "{str:name}[,{int:size}]" ]

    set title [ "{str:text}" ]
              [ font "{str:name}[,{int:size}]" ][ [no]enhanced ]
              [ textcolor | tc [ {clr:colorspec}
                          | lt {idx:type}
                          | ls {idx:style} ] ]
              [ offset {pos:off} ]


  STYLE
  ~~~~~

    A color specification begins with the keyword rgbcolor (or rgb for
    short), followed by a string, which can either be the name of a
    color known to gnuplot, or a hex string, preceded by a #
    character, giving the RGB components of the desired color.
         rgbcolor "{str:colorname}"
         rgbcolor "{#RRGGBB}"

    set style data {enum:style}
    set style function {enum:style}
    set style increment [ default | userstyles ]
    set style arrow {idx:index} default

    set style arrow {idx:index} [ nohead | head | backhead | heads ]
                    [ size {flt:length} [,{flt:angle}]
                    [,{flt:backangle}] ]
                    [ filled | empty | nofilled ]
                    [ front  | back ]
                    [ [ linetype  | lt {idx:type} ]
                      [ linewidth | lw {int:width} ]
                    | [ linestyle | ls {idx:style} ] ]

    set style fill [ empty | solid [{flt:density}] | pattern [{idx:n}] ]
                   [ border [ {idx:linetype} ] | noborder ]

    set style histogram [ clustered [ gap {flt:gap} ]
                        | errorbars [ gap {flt:gap} ]
                        [ linewidth | lw {int:width} ] ]
                        | rowstacked | columnstacked

    set style line {int:index} default
    set style line {int:index} [ [ linetype  | lt ] {idx:linetype} ]
                               [ [ linewidth | lw ] {flt:linewidth} ]
                               [ [ pointtype | pt ] {idx:pointtype} ]
                               [ [ pointsize | ps ] {flt:pointsize} ]
                               [ [ linecolor | lc ] {clr:colorspec} ]

    set style rectangle [ front | back | behind ]
                        [  fillcolor | fc {clr:color} ]
                        [  fillstyle | fs {idx:style} ]
                        [  linewidth | lw {flt:width} ]

    set bars [ small | large | fullwidth | {flt:mult} ]

    set boxwidth [ {flt:size} ] [ absolute | relative ]

    set pointsize {flt:mult}


   AXES
   ~~~~

      Several options related to axes exist in different forms, applicable to
      the different axes that may exist in a plot. The respective axis is
      referenced as part of the option name.

        Prefix    Applicable axis
        ~~~~~~    ~~~~~~~~~~~~~~~
          x       Primary x axis (bottom)
          y       Primary y axis (left)
         x2       Secondary x axis (top)
         y2       Secondary y axis (right)
          z       z axis
         cb       colorbox

     An underscore will replace all command references to axes

    set format [ x | y | x2 | y2 | xy | z | cb ] [ "{str:format}" ]

    set grid [ [no]_tics ] [ [no]m_tics ]
             [ layerdefault | front | back ]
             [ polar [ {flt:angle} ] ]
             [ [ linetype  | lt {idx:majortype} ]
               [ linewidth | lw {flt:majorwidth} ]
             | [ linestyle | ls {idx:majorstyle} ] ]
             [,[ linetype  | lt {idx:minortype} ]
               [ linewidth | lw {flt:minorwidth} ]
             | [ linestyle | ls {idx:minorstyle} ] ]

    set _label ["{str:text}"] [ offset {pos:offset} ]
               [ font "{str:name}[,{int:size}]" ]
               [ textcolor | tc [ {clr:color}
               | lt {idx:type}
               | ls {idx:style} ] ]
               [ [no]enhanced ]
               [ rotate by {int:degrees} ]

    set m_tics [ {int:intervals} | default ]

    set _range [{flt:min}:{flt:max}]    # With the [..] brackets!

    set _tics [  axis | border ]
              [  [no]mirror ]
              [  in | out ]
              [  scale [ default | {flt:major} [,{flt:minor}] ] ]
              [  [no]rotate [by {flt:ang}] ]
              [  offset {pos:offset} | nooffset ]
              [  font "{str:name} [,{int:size}]" ]
              [  textcolor | tc {clr:color} ]
              [ add ]
              [ autofreq
                 | {flt:incr}
                 | {flt:start}, {flt:incr} [,{flt:end}]
                 | ( ["{str:label}"] {flt:pos} [ 0 | 1 ]
                  [, ["{str:label}"] ... ] ) ]

    set _zeroaxis [ [ linetype  | lt {idx:type} ]
                    [ linewidth | lw {flt:width} ]
                  | [ linestyle | ls {idx:style} ] ]


  THREE-DIMENSIONAL PLOTS
  ~~~~~~~~~~~~~~~~~~~~~~~

    set dgrid3d [ {int:nx} [, {int:ny} [, {int:q} ] ] ]

    set hidden3d [ offset {int:offset} ] [ trianglepattern {int:mask} ]

    set isosamples {int:xlines} [, {int:ylines} ]

    set surface

    set view [ {flt:polar} [, {flt:azimuthal}
             [, {flt:scale} [, {flt:z_scale} ]]]]

    set xyplane [ at {flt:zvalue} | {flt:frac} ]

    set clabel [ "{str:format}" ]

    set cntrparam [ linear | cubicspline | bspline ]
    set cntrparam [ points {int:q} ]
    set cntrparam [ order {int:q} ]
    set cntrparam levels [ auto [{int:n}]
                  | discrete {flt:z0} [, {flt:z1} [, ...]]
                  | incremental
                  {flt:start}, {flt:inc} [, {flt:end}] ]

    set contour [ base | surface | both ]
           -
    set colorbox [ vertical | horizontal ]
                 [ noborder | bdefault | border {idx:linestyle} ]
                 [ default | user [ origin {pos:orig} ]
                 [ size {pos:size} ] ]

    set palette [ model [ RGB | HSV ] ]
                [ defined ( {flt:v1} {clr:color1},
                            {flt:v2} {clr:color2}, ... )
                | functions f1(gray), f2(gray), f3(gray)
                | file "{str:filename}" [ using ... ] ]
                [ positive | negative ]
                [ maxcolors {int:n} ]

    set pm3d [ at [b|s|t] ]
             [ implicit | explicit ]
             [ hidden3d {idx:linestyle} | nohidden3d ]
             [ interpolate {int:xsteps},{int:ysteps} ]
             [ corners2color
             [ mean|geomean|median|min|max|c1|c2|c3|c4 ] ]
             [ scansautomatic
             | scansforward | scansbackward | depthorder ]


  OUTPUT
  ~~~~~~
    set output [ "{str:filename}" ]

    set print [ "{str:filename}" ] [ append ]

    set table [ "{str:filename}" ]

    set termoption [no]enhanced
    set termoption font "{str:name} [, {int:size} ]"


 F5.2.5} Text and Fonts
   ENHANCED TEXT
   ~~~~~~~~~~~~~
       {img:gnuplot_enhanced.gif}



   FONT
   ~~~~
       {img:gnuplot_fonts.gif}
                                               -

 F5.2.6} Terminals

    set terminal XXX [ size {int:x},{int:y} ] [ [no]crop ]
                     [ tiny | small | medium | large | giant ]
                     [ font [ {str:name} [ {int:size} ] ]
                     | [ "{str:path} [, {int:size} ]" ] ]
                     [ [no]enhanced ]
                     [ rounded | butt ]
                     [ {color0} {color1} {color2} ...]

    set terminal gif ...  [ [no]transparent ] [ animate [delay {int:time}] ]
    set terminal png ...  [ [no]transparent ] [ [no]interlace ]
                          [ [no]truecolor ]
    set terminal jpeg ... [ [no]interlace ]

    set terminal postscript [ landscape | portrait | eps ]
                            [ color | mono ] [ blacktext | colortext ]
                            [ simplex | duplex | defaultplex ]
                            [ size {flt:x}[in|cm], {flt:y}[in|cm] ]
                            [ [font] "{str:name}" [ {int:size} ] ]
                            [ [no]enhanced ]
                            [ solid | dashed ]
                            [ linewidth | lw {flt:factor} ]
                            [ dashlength | dl {flt:factor} ]
                            [ rounded | butt ]

     set terminal postscript [ fontfile [add|delete] "{str:filename}"
                             | nofontfiles ]

     set terminal epslatex [ standalone | input ]
                           [  header "{str:header}" | noheader ]
                           [  color | mono ] [ blacktext | colortext ]
                           [  size {flt:x}[in|cm], {flt:y}[in|cm] ]
                           [  [font] "{str:latexfont}" [ {int:size} ] ]
                           [  solid | dashed ]
                           [  linewidth | lw {flt:factor} ]
                           [  dashlength | dl {flt:factor} ]
                           [  rounded | butt ]

     set terminal wxt [ {int:winid} ] [ title "{str:title}" ]
                      [ [no]enhanced ]
                      [ font "{str:name} [,{int:size}]" ]
                      [ [no]persist ] [ [no]raise ] [ [no]ctrl ]
     set terminal wxt {int:winid} close

     set terminal x11 [ {int:winid} ] [ title "{str:title}" ]
                      [ [no]enhanced ]
                      [ font "{str:fontspec}" ]
                      [ [no]persist ] [ [no]raise ] [ [no]ctrlq ]
                      [ solid | dashed ]
     set terminal x11 [ {int:winid} ] close
     set terminal aqua [ {int:winid} ] [ title "{str:title}" ]
                       [  size {int:x} {int:y} ]
                       [  [no]enhanced ]
                       [  font "{str:name} [,{int:size}]" ]
                       [  solid | dashed ] [ dl {flt:dashlength} ]

      set terminal svg [ size {int:x},{int:y} [ fixed | dynamic ] ]
                       [ font "{str:name} [, {int:size} ]" ]
                       [ fontfile "{str:filename}" ]
                       [ [no]enhanced ]
                       [ rounded|butt ] [ linewidth {flt:factor} ]

1******************************************************************************

  F6} Preferences Dialog

  The Preferences dialog is divided in the following categories:

    F6.1  Programs        Setup of programs and paths used by flair

    F6.2  Colors          Colors of visual elements

    F6.3  Data            Automatic rules for data processing and
                          setup of processing programs

    F6.4  Fonts           Fonts of visual elements

    F6.5  Geometry        Geometry Editor setup and transformation options

    F6.6  Gnuplot         Modify global gnuplot commands and save file types

    F6.7  Interface       Variables to modify the interface behavior

    F6.8  Run             Modify spawn name, submit scripts, batch queues




  F6.1} Programs
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

           {img:grab-preferences-programs.gif}

    "Fluka Directory"        Changes or assigns the "Default Fluka Var"
                             - Default: <empty> flair is expecting that
                               the "Default Fluka Var" should contain
                               a valid FLUKA path.
                             - Should point a valid fluka directory.
                               Will be assigned to the "Default Fluka Var"
                             Info: Is highly recommended that the FLUPRO
                             is set in a system profile file like:
                             BASH:     .bashrc, .profile, .bash_profile
                             TCSH/CSH: .tcshrc, .login
                             GNOME:    .gnomerc

    "rfluka"                 Set the default executable script for
                             FLUKA.
                             Default $FLUPRO/flutil/rfluka

    "Executable"             Set the default executable program for
                             FLUKA. The existance of this program will
                             be checked every time you open flair.
                             Default $FLUPRO/flukahp

    "Compiler"               Override FLUFOR with the compiler to use
                             Possible values are: g77, gfortran
                             Default $FLUFOR

    "fff"                    Set the fortran compilation program
                             to use.
                             Default $FLUPRO/flutil/fff

    "USBMAX trace scan"      Set the program for maximum scanning
                             from the USRBIN output
                             Default $FLUPRO/flutil/usbmax

    "Gplevbin processing"    Set the program for creating histograms
                             from the USRBIN output
                             Default $FLUPRO/flutil/gplevbin

    "USBREA usrbin to ascii" Program to convert USRBIN files to ascii.
                             Activated by right-click on usrbin files
                             on the Output Files frame
                             Default $FLUPRO/flutil/usbrea

    "Kill Command"           Program to kill a run. It will accept one
                             argument the process id number of the rfluka
                             command.
                             Default: <empty> to use the system kill
                             command

    "Editor"                 Define an external editor.
                             Default: /usr/bin/emacs

    "Terminal"               Define the terminal program to use.

    "Debugger"               Define the fortran debugger program to use.
                             Default: gdb

    "Gnuplot"                Define the gnuplot program to execute
                             Default: gnuplot


  F6.2} Colors
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

           {img:grab-preferences-colors.gif}

  F6.3} Data
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

           {img:grab-preferences-data.gif}

  Output File Name           Editable listbox to modify the default
                             name generation when a scoring card is found
                             Special characters:
                                \I   will be replaced with input name
                                \U   will be replaced with the unit
                                \T   Long type name (usrtrack,
                                     usrflair.bin...)
                                \t   Short one character (usrtrack=t,
                                     usrbin=b, detect=d...)
                                \e   default extension:
                                        USRBIN    = bnn
                                        USRCOLL   = cll
                                        DETECT    = dtc
                                        RESNUCLEi = rnc
                                        USRTRACK  = trk
                                        USRBDX    = bnx
                                        USRYIELD  = yie

  Default Rules              Default Rules to filter output files
                               [+|-][regular-expression]
                             + = add a file
                             - = remove the file
                             regular expression follows the python
                             rules of the "re" module.
                             e.g.   .  = any character
                                    \d = any digit
                                    \. = dot
                                    [a-f] = characters from a to f
                             The \I \U \T \t and \e are still valid


    "USRBIN processing"      Set the program for processing the output
                             of USRBIN scoring cards.
                             Default $FLUPRO/flutil/usbsuw

    "USRTRACK processing"    Set the program for processing the output
                             of USRTRACK and USRCOLL scoring cards.
                             Default $FLUPRO/flutil/ustsuw

    "USRBDX processing"      Set the program for processing the output
                             of USRBDX scoring cards.
                             Default $FLUPRO/flutil/usxsuw

    "USRYIELD processing"    Set the program for processing the output
                             of USRYIELD scoring cards.
                             Default $FLUPRO/flutil/usysuw

    "RESNUCLEi processing"   Set the program for processing the output
                             of RESNUCLEi scoring cards.
                             Default $FLUPRO/flutil/usrsuw

    "DETECT processing"      Set the program for processing the output
                             of DETECT scoring cards.
                             Default $FLUPRO/flutil/detsuw


  F6.4} Fonts
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

           {img:grab-preferences-fonts.gif}

  Font
  ~~~~
    "input.*"                Fonts used in the Input Frame editor
                             Changes will be immediate

    "title"                  Global title font
                             Restart of the program is required

    "tree"                   Project browser tree font
                             Restart of the program is required

    "Tk*Font"                Global font for all tk/tcl widgets
                             Only works with tk >= 8.5
                             For tk 8.4 or lower please add manually
                             in the flair.ini file in the [Font]
                             section the additional fonts to configure as
                             standard X11 resources. For example:

                             [Font]
                             *text*font = Courier,-12
                             *entry*font = Helvetica,-12

  F6.5} Geometry
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

           {img:grab-preferences-geometry.gif}

    Laptop mode              Swap middle with right mouse button for
                             the pan/zoom/rotate actions on the
                             Geometry Editor

    Invert Mouse Wheel       Invert the zooming of the mouse wheel

    Zoom on Mouse Location   Check to zoom In/Out on mouse location.
                             Uncheck to zoom In/Out on viewport center.
                             Pressing [Alt] during zooming inverts the action

    # CPU/cores              Number of cores per viewport to use.
                                  0 = parallel mode with all cores available per
                                      viewport (default);
                                  1 = synchronous mode, 1 core per viewport;
                                  n = parallel mode with n cores per viewport.
                             To activate the changes a restart is required.

    Snapping distance        Distance in pixel where snapping to
                             closest point takes place

    Zero                     number smaller than this will be
                             considered as zero

    Infinite                 when converting [XYZ]CC/[XYZ]EC to infinite
                             cylinders RCC and REC what height to use

    Accuracy                 number of significant digits to use


  F6.6} Gnuplot
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

           {img:grab-preferences-gnuplot.gif}

    Terminal                 Additional gnuplot options to terminal selection

    Global commands          Text field to supply global gnuplot
                             commands to be executed before any plot

    File Types               Editable list box to define export file
                             types for gnuplot output.
                             Right-click on listbox to open the
                             context menu to add/del types


  F6.7} Interface
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

           {img:grab-preferences-interface.gif}

    "Skip About dialog"      Do not display our nice about dialog during
                             startup

    "Show fluka file in fluka_XXX dir"
                             In the Output Files dialog show also the
                             files inside the temporary fluka
                             directories

    "Keep backups"           Keep backup copies of the .flair and .inp
                             files. The backup copies are ending with
                             the ~ suffix.

    "Clean up temporary files"
                             After the execution of any command that a
                             temporary file are generated clean them up.

    "Temporary prefix"       The prefix to be used for all temporary files

    "Auto save time"         Input file autosave period if changes
                             occur. Input file is saved in the pickle
                             format.

    "Attach timeout"         Timeout when trying to attach to a running
                             process

    "Refresh Interval"       Refreshing interval in the Run Frame to
                             display the progress of a run

    "Time format"            python format for displaying the file
                             time-stamp


  F6.8} Run
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

           {img:grab-preferences-run.gif}

    "Spawn Run Name"        Modify the automatic generation of the
                            spawn name
                            The following escape sequences will be
                            replaced with:
                                \I   input name
                                \a   two letter run index aa,ab,ac...,ba,...
                                \A   two letter run index AA,AB,AC...,BA,...
                                \n   run index 1,2,3,...
                                \2   two digit run index 01,02,03,...
                                \3   three digit run index 001,002,003,...
                                \4   four digit run index 0001,0002,0003,...
                                \x   two hex-digit run index 01,02,...,0A,0B,...
                                \X   roman number I,II,III,IV,V,...
                                /    directory name
                                *    any-other character will be taken literally

                            e.g.
                                \2/I  =>  01/Input   01/Input...
                                          Running each spawn job in a
                                          subdirectory
                                \I_\a =>  Input_aa   Input_ab...

    Modify the queue / submit command in the Run Frame

    To Add, Delete, Clone Right-click on the listbox and select the
    appropriate command

    To modify the value click directly on the item and type the
    command or the submit name

    The "*Default" should always be there and is the default queue
    that flair will use



  Easter Eggs
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  In the Input Editor Double-Right click on the bottom text box
  displaying the FLUKA representation of card and the game of AWARI
  will start.



1******************************************************************************

  F7} API

     There is work presently going on to decouple the functionality
     from the interface, some of the basic classes can be used to
     input processing

     file: Input.py     - to manipulate input files
        import Input
        Input.init([database]) to initialize the database of cards
        Most commonly used classes:
                Card    containing the description of each card
                Input   manipulating the FLUKA input file

     file: Project.py   - to manipulate project files


  F7.1} Card class
        Constructor:

                Input.Card(tag, what [,comment [,extra]])

        what is a list starting with what[0]=sdum

        Important Methods:
                setWhat(n, value)     set value to what#n
                nwhats()              return number of whats
                what(n)               return value of what#n
                numWhat(n)            return numeric value of what#n
                intWhat(n)            return integer value of what#n
                clone()               return a copy of the card
                setEnable(e)          enable/disable card


  F7.2} Input class
        Constructor:

                Input.Input([filename])

        initialize the structure to hold an input file and optionally
        read the input filename

        Important Variables:
                cardlist              a list with pointers to cards
                cards                 a dictionary with pointers to cards grouped
                                      per tag
        Important Methods:
                read(filename)        read input from file filename
                write(filename)       write input to file filename
                addCard(card,pos)     add card to position pos (or end of file)
                delCard(pos)          delete card from position pos
                preprocess()          pre-process input to check for active cards
                setEnable(e)          enable/disable card


  F7.3} Project class
        Constructor:

                Project.Project()

        initialize the structure to hold a project file

        Important Methods:
                clear()              to re-initialize project
                load(filename)       load project from file filename
                save([filename])     save project to filename
                runCmd(run)          create run command


   F.4} .flair file structure
        # comments
        Variable: Value
        Notes:
                multi-line values are terminated with
                Ctrl-L

        Run: name
                ...                  Block of Run related information
                Data:
                ...                  ... Including Data processing information
                EndData
        EndRun
        Plot: name
        ...                          Plot related informations
        EndPlot


  F7.5} Example
        Read an input file and modify the random number seed

        import Input
        Input.init()
        input = Input.Input("test.inp")
        try:
                rndcard = input["RANDOMIZ"][0]
                rndcard.setWhat(2, 5723)
        except:
                print "No RANDOMIZe card found"
                sys.exit(0)
        input.write("test2.inp")

1******************************************************************************

  F8} Copyright and User License

  Copyright CERN and INFN

  All rights not expressly granted under this license are reserved.

  Installation, use, reproduction, display of the
  software ("flair"), in source and binary forms, are
  permitted free of charge on a non-exclusive basis for
  internal scientific, non-commercial and non-weapon-related
  use by non-profit organizations only.

  For commercial use of the software, please contact the main
  author Vasilis.Vlachoudis@cern.ch for further information.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following
  conditions are met:

  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the
     distribution.


  DISCLAIMER
  ~~~~~~~~~~
  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
  NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY, OF
  SATISFACTORY QUALITY, AND FITNESS FOR A PARTICULAR PURPOSE
  OR USE ARE DISCLAIMED. THE COPYRIGHT HOLDERS AND THE
  AUTHORS MAKE NO REPRESENTATION THAT THE SOFTWARE AND
  MODIFICATIONS THEREOF, WILL NOT INFRINGE ANY PATENT,
  COPYRIGHT, TRADE SECRET OR OTHER PROPRIETARY RIGHT.


  LIMITATION OF LIABILITY
  ~~~~~~~~~~~~~~~~~~~~~~~
  THE COPYRIGHT HOLDERS AND THE AUTHORS SHALL HAVE NO
  LIABILITY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL,
  CONSEQUENTIAL, EXEMPLARY, OR PUNITIVE DAMAGES OF ANY
  CHARACTER INCLUDING, WITHOUT LIMITATION, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES, LOSS OF USE, DATA OR PROFITS,
  OR BUSINESS INTERRUPTION, HOWEVER CAUSED AND ON ANY THEORY
  OF CONTRACT, WARRANTY, TORT (INCLUDING NEGLIGENCE), PRODUCT
  LIABILITY OR OTHERWISE, ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
  DAMAGES.

1******************************************************************************
vim:spell:tw=80
